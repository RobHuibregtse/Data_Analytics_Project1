{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 303,
   "id": "a230cf2b-25cd-4e67-8231-ea6f92a4805c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ------ START OF COMMON FILE ANALYSIS CODE -----\n",
    "# Dependencies\n",
    "import pandas as pd\n",
    "from pathlib import Path\n",
    "import scipy.stats as st\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "import numpy as np\n",
    "from datetime import datetime\n",
    "import scipy.stats as stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "id": "b645717d-6918-4586-b080-e9343bb8c24c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# --- Set global time period variables ---\n",
    "prepandemic_start = '2018-01-01'\n",
    "prepandemic_end = '2019-12-31'\n",
    "pandemic_start = '2020-01-01'\n",
    "pandemic_end = '2021-12-31'\n",
    "postpandemic_start = '2022-01-01'\n",
    "postpandemic_end= '2023-12-31'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "id": "2eaac994-db93-46ab-899f-072c04d44fbc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# --- Set filepath for file to analyze ---\n",
    "# NOTE: Edit this for each new file being run\n",
    "zillow_csv_path = Path('Zillow_Data/Metro_market_temp_index_uc_sfrcondo_month.csv')\n",
    "zillow_metric_name = 'Market Heat Index'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "id": "600b0148-9a96-43ed-b18e-b265e172fc2e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created new dataframe: market_heat_index_df\n"
     ]
    }
   ],
   "source": [
    "# --- Create a data frame containing the data from the CSV ---\n",
    "# Load the CSV\n",
    "zillow_df = pd.read_csv(zillow_csv_path)\n",
    "# Insert 'US' as the state name for the United States region, so it shows up in state summary\n",
    "zillow_df.at[0,\"StateName\"] = 'US'\n",
    "# Rename labels\n",
    "zillow_df.rename(columns={'SizeRank': 'Size Rank', 'RegionName': 'Metro Area', 'StateName': 'State' }, inplace=True)\n",
    "# Remove the RegionType column\n",
    "zillow_df = zillow_df.drop('RegionType', axis = 1)\n",
    "# Insert a new blank column to store the Size Segment\n",
    "zillow_df['Size Segment'] = pd.NA\n",
    "# Re-order columns so that Size Segment is next to Size Rank\n",
    "columns = zillow_df.columns.tolist()\n",
    "columns.remove('Size Segment')\n",
    "columns.insert(2, 'Size Segment')\n",
    "zillow_df = zillow_df[columns]\n",
    "# Establish Size Segments as bins\n",
    "size_segment_bins = [-1, 0, 100, 300, 500, 1000]\n",
    "size_segment_labels = [\"National Average\", \"Top 100\", \"101 - 300\", \"301 - 500\", \"Bottom 500\"]\n",
    "# Insert segment values into Size Segment column\n",
    "zillow_df['Size Segment'] = pd.cut(zillow_df[\"Size Rank\"], bins=size_segment_bins, labels=size_segment_labels)\n",
    "# Select only the columns with date information and the 'Size Segment' column\n",
    "date_columns = [col for col in zillow_df.columns if isinstance(col, str) and col.startswith('2018') or col.startswith('2019') or col.startswith('2020') or col.startswith('2021') or col.startswith('2022') or col.startswith('2023')]\n",
    "columns_of_interest = ['RegionID', 'Size Rank', 'Size Segment', 'Metro Area', 'State'] + date_columns\n",
    "zillow_df= zillow_df[columns_of_interest]\n",
    "\n",
    "# Create a unique data frame which is named after the metric currently being analyzed:\n",
    "# Set the df name as a string equal to the zillow metric name, with spaces replaced with underscores and in all lowercase\n",
    "zillow_unique_df_name = zillow_metric_name.replace(\" \", \"_\").lower() + \"_df\"\n",
    "globals()[zillow_unique_df_name] = zillow_df.copy()\n",
    "print(f'Created new dataframe: {zillow_unique_df_name}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "id": "c2ba98c4-394f-4c3f-a316-302ef63d6a85",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created new dataframe: market_heat_index_df_state\n"
     ]
    }
   ],
   "source": [
    "# --- Create a data frame segmented by state ---\n",
    "# Create a data frame that summarizes the data by size segment\n",
    "state_summary_df = zillow_df.groupby('State').mean('State').drop('RegionID',  axis = 1).drop('Size Rank',  axis = 1)\n",
    "state_summary_df.reset_index(inplace=True)\n",
    "state_summary_df.rename(columns={'State': 'Date'}, inplace = True)\n",
    "state_summary_df.set_index('Date', inplace=True)\n",
    "state_summary_df = state_summary_df.T\n",
    "state_summary_df.reset_index(inplace=True)\n",
    "state_summary_df.rename(columns={'index': 'Date'}, inplace=True)\n",
    "state_summary_df['Date'] = pd.to_datetime(state_summary_df['Date'])\n",
    "# Copy to uniquely named data frame\n",
    "state_unique_df_name = zillow_metric_name.replace(\" \", \"_\").lower() + \"_df_state\"\n",
    "globals()[state_unique_df_name] = state_summary_df.copy()\n",
    "print(f'Created new dataframe: {state_unique_df_name}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "id": "34187fb0-b884-4eae-a411-1348b4242d9c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created new dataframe: market_heat_index_df_size\n"
     ]
    }
   ],
   "source": [
    "# --- Create a data frame segmented by size rank ---\n",
    "# Group by 'Size Segment' and calculate the mean for each segment\n",
    "zillow_df_mean = zillow_df.groupby('Size Segment', observed = False).mean('Size Segment').drop('RegionID',  axis = 1).drop('Size Rank',  axis = 1)\n",
    "# Reset the index for better display\n",
    "zillow_df_mean.reset_index(inplace=True)\n",
    "zillow_df_mean.rename(columns={'Size Segment': 'Date'}, inplace = True)\n",
    "zillow_df_mean.set_index('Date', inplace=True)\n",
    "zillow_df_mean = zillow_df_mean.T\n",
    "zillow_df_mean.reset_index(inplace=True)\n",
    "zillow_df_mean.rename(columns={'index': 'Date'}, inplace=True)\n",
    "zillow_df_mean['Date'] = pd.to_datetime(zillow_df_mean['Date'])\n",
    "# Create uniquely named data frame\n",
    "size_unique_df_name = zillow_metric_name.replace(\" \", \"_\").lower() + \"_df_size\"\n",
    "globals()[size_unique_df_name] = zillow_df_mean.copy()\n",
    "print(f'Created new dataframe: {size_unique_df_name }')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "id": "86ee8ed4-f49d-4f26-b278-488d58f64804",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Federal Funds Rate</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1954-07-31</th>\n",
       "      <td>0.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1954-08-31</th>\n",
       "      <td>1.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1954-09-30</th>\n",
       "      <td>1.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1954-10-31</th>\n",
       "      <td>0.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1954-11-30</th>\n",
       "      <td>0.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-30</th>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-05-31</th>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-06-30</th>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-07-31</th>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-08-31</th>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>842 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Federal Funds Rate\n",
       "Date                          \n",
       "1954-07-31                0.80\n",
       "1954-08-31                1.22\n",
       "1954-09-30                1.07\n",
       "1954-10-31                0.85\n",
       "1954-11-30                0.83\n",
       "...                        ...\n",
       "2024-04-30                5.33\n",
       "2024-05-31                5.33\n",
       "2024-06-30                5.33\n",
       "2024-07-31                5.33\n",
       "2024-08-31                5.33\n",
       "\n",
       "[842 rows x 1 columns]"
      ]
     },
     "execution_count": 309,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "interest_rates_csv_path = Path('Zillow_Data/fed-funds-rate-historical-chart-modified.csv')\n",
    "interest_rates_df = pd.read_csv(interest_rates_csv_path)\n",
    "# Convert dates to datetime format\n",
    "interest_rates_df['Date'] = pd.to_datetime(interest_rates_df['Date'])\n",
    "# Some months do not have a recorded interest rate on the last date of the month. To get around this: \n",
    "# Change the date to the last day of the month for each date, in order to better group by mean and align with other data frames\n",
    "def last_day_of_month(date):\n",
    "    return date + pd.offsets.MonthEnd(0)\n",
    "interest_rates_df['Date'] = interest_rates_df['Date'].apply(last_day_of_month)\n",
    "interest_rates_df= interest_rates_df.groupby('Date').mean().round(2)\n",
    "interest_rates_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "id": "69656c62-7545-427e-9eec-ff93a03038e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>National Average</th>\n",
       "      <th>Top 100</th>\n",
       "      <th>101 - 300</th>\n",
       "      <th>301 - 500</th>\n",
       "      <th>Bottom 500</th>\n",
       "      <th>Federal Funds Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-01-31</td>\n",
       "      <td>49.0</td>\n",
       "      <td>51.010101</td>\n",
       "      <td>37.091371</td>\n",
       "      <td>23.302564</td>\n",
       "      <td>25.770026</td>\n",
       "      <td>1.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-02-28</td>\n",
       "      <td>50.0</td>\n",
       "      <td>50.878788</td>\n",
       "      <td>38.761421</td>\n",
       "      <td>25.758974</td>\n",
       "      <td>26.951482</td>\n",
       "      <td>1.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-03-31</td>\n",
       "      <td>52.0</td>\n",
       "      <td>54.424242</td>\n",
       "      <td>42.705584</td>\n",
       "      <td>31.176166</td>\n",
       "      <td>31.173442</td>\n",
       "      <td>1.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-04-30</td>\n",
       "      <td>54.0</td>\n",
       "      <td>58.101010</td>\n",
       "      <td>45.492386</td>\n",
       "      <td>34.702564</td>\n",
       "      <td>34.952000</td>\n",
       "      <td>1.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-05-31</td>\n",
       "      <td>54.0</td>\n",
       "      <td>58.545455</td>\n",
       "      <td>46.345178</td>\n",
       "      <td>36.139896</td>\n",
       "      <td>36.379581</td>\n",
       "      <td>1.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>2023-08-31</td>\n",
       "      <td>62.0</td>\n",
       "      <td>66.585859</td>\n",
       "      <td>57.781726</td>\n",
       "      <td>55.775510</td>\n",
       "      <td>51.343318</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>2023-09-30</td>\n",
       "      <td>58.0</td>\n",
       "      <td>61.696970</td>\n",
       "      <td>52.598985</td>\n",
       "      <td>50.502564</td>\n",
       "      <td>46.791667</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>2023-10-31</td>\n",
       "      <td>55.0</td>\n",
       "      <td>57.333333</td>\n",
       "      <td>48.051020</td>\n",
       "      <td>44.045918</td>\n",
       "      <td>42.002331</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>2023-11-30</td>\n",
       "      <td>53.0</td>\n",
       "      <td>56.272727</td>\n",
       "      <td>46.163265</td>\n",
       "      <td>41.603175</td>\n",
       "      <td>39.796253</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>2023-12-31</td>\n",
       "      <td>55.0</td>\n",
       "      <td>61.202020</td>\n",
       "      <td>49.082051</td>\n",
       "      <td>42.422680</td>\n",
       "      <td>40.927059</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>72 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date  National Average    Top 100  101 - 300  301 - 500  Bottom 500  \\\n",
       "0  2018-01-31              49.0  51.010101  37.091371  23.302564   25.770026   \n",
       "1  2018-02-28              50.0  50.878788  38.761421  25.758974   26.951482   \n",
       "2  2018-03-31              52.0  54.424242  42.705584  31.176166   31.173442   \n",
       "3  2018-04-30              54.0  58.101010  45.492386  34.702564   34.952000   \n",
       "4  2018-05-31              54.0  58.545455  46.345178  36.139896   36.379581   \n",
       "..        ...               ...        ...        ...        ...         ...   \n",
       "67 2023-08-31              62.0  66.585859  57.781726  55.775510   51.343318   \n",
       "68 2023-09-30              58.0  61.696970  52.598985  50.502564   46.791667   \n",
       "69 2023-10-31              55.0  57.333333  48.051020  44.045918   42.002331   \n",
       "70 2023-11-30              53.0  56.272727  46.163265  41.603175   39.796253   \n",
       "71 2023-12-31              55.0  61.202020  49.082051  42.422680   40.927059   \n",
       "\n",
       "    Federal Funds Rate  \n",
       "0                 1.42  \n",
       "1                 1.42  \n",
       "2                 1.51  \n",
       "3                 1.69  \n",
       "4                 1.70  \n",
       "..                 ...  \n",
       "67                5.33  \n",
       "68                5.33  \n",
       "69                5.33  \n",
       "70                5.33  \n",
       "71                5.33  \n",
       "\n",
       "[72 rows x 7 columns]"
      ]
     },
     "execution_count": 310,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "market_heat_index_vs_interest_rate_df = pd.merge(market_heat_index_df_size, interest_rates_df, on=\"Date\", how='inner')\n",
    "market_heat_index_vs_interest_rate_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "id": "ccd55f15-db66-45c7-b1f4-69bcde28a4f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(market_heat_index_vs_interest_rate_df['Date'], market_heat_index_vs_interest_rate_df['National Average']/100, label = \"National Average\", color = \"orange\")\n",
    "plt.plot(market_heat_index_vs_interest_rate_df['Date'], market_heat_index_vs_interest_rate_df['Top 100']/100, label = \"Top 100\", color = \"green\")\n",
    "plt.plot(market_heat_index_vs_interest_rate_df['Date'], market_heat_index_vs_interest_rate_df['101 - 300']/100, label = \"101 - 300\", color = \"blue\")\n",
    "plt.plot(market_heat_index_vs_interest_rate_df['Date'], market_heat_index_vs_interest_rate_df['301 - 500']/100, label = \"301 - 500\", color = \"violet\")\n",
    "plt.plot(market_heat_index_vs_interest_rate_df['Date'], market_heat_index_vs_interest_rate_df['Bottom 500']/100, label = \"Bottom 500\", color = \"pink\")\n",
    "plt.plot(market_heat_index_vs_interest_rate_df['Date'], market_heat_index_vs_interest_rate_df['Federal Funds Rate']/10, label = \"Federal Funds Rate\", color  = \"red\")\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.xlabel(\"Year\")\n",
    "plt.ylabel(\"Market Heat Index\")\n",
    "plt.yticks([0.10, 0.30, 0.50, 0.70, 0.90])\n",
    "plt.grid(True)\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "id": "8371a380-acc4-4768-8f4b-3d1a6b0c8fe0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ANOVA Result: F_onewayResult(statistic=0.2007376608675931, pvalue=0.6563244951042477)\n",
      "T-Test Result: TtestResult(statistic=-0.4480375663575465, pvalue=0.6563244951042501, df=44.0)\n"
     ]
    }
   ],
   "source": [
    "#Filter the data for the pandemic period (2020-2021)\n",
    "pandemic_data = market_heat_index_vs_interest_rate_df[market_heat_index_vs_interest_rate_df['Date'].between(pandemic_start, pandemic_end)]\n",
    "#Calculate the monthly percentage change in rent value index for each segment\n",
    "pandemic_data.set_index('Date', inplace=True)\n",
    "monthly_changes = pandemic_data.pct_change().dropna()\n",
    "#Group the monthly changes into Large and Small city segments\n",
    "large_city_changes = monthly_changes['Top 100'].dropna()\n",
    "small_city_changes = monthly_changes[['101 - 300', '301 - 500', 'Bottom 500']].mean(axis=1).dropna()\n",
    "#Run the ANOVA and T-test with these multiple data points\n",
    "anova_result = stats.f_oneway(large_city_changes, small_city_changes)\n",
    "t_test_result = stats.ttest_ind(large_city_changes, small_city_changes)\n",
    "print(\"ANOVA Result:\", anova_result)\n",
    "print(\"T-Test Result:\", t_test_result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "id": "1538dc28-e1a7-4a22-b499-ccd05d94af28",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Create a line plot\n",
    "plt.figure(figsize=(12, 6))\n",
    "\n",
    "# Plot large city changes\n",
    "plt.plot(large_city_changes.index, large_city_changes, label='Large Cities (Top 100)', color='blue')\n",
    "\n",
    "# Plot small city changes (average of segments)\n",
    "plt.plot(small_city_changes.index, small_city_changes, label='Small Cities (101-Bottom 500)', color='green')\n",
    "\n",
    "# Add title and labels\n",
    "plt.title('Monthly Percentage Change in Market Heat Index During Pandemic (2020-2021)')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Percentage Change')\n",
    "plt.xticks(rotation=45)\n",
    "# Add legend\n",
    "plt.legend()\n",
    "# Display the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 334,
   "id": "c831c1dd-6abf-45bb-b129-549236b516d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Federal Funds Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>National Average</th>\n",
       "      <td>-0.511744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Top 100</th>\n",
       "      <td>-0.456995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101 - 300</th>\n",
       "      <td>-0.451595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>301 - 500</th>\n",
       "      <td>-0.404164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bottom 500</th>\n",
       "      <td>-0.444625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Federal Funds Rate</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Federal Funds Rate\n",
       "National Average             -0.511744\n",
       "Top 100                      -0.456995\n",
       "101 - 300                    -0.451595\n",
       "301 - 500                    -0.404164\n",
       "Bottom 500                   -0.444625\n",
       "Federal Funds Rate            1.000000"
      ]
     },
     "execution_count": 334,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#corr_market_heat_national_interest_rates = market_heat_index_vs_interest_rate_df['National Average'].corr(market_heat_index_vs_interest_rate_df['Federal Funds Rate'])\n",
    "corr_market_heat_national_interest_rates = market_heat_index_vs_interest_rate_df.drop('Date', axis = 1).corr()\n",
    "corr_market_heat_national_interest_rates = corr_market_heat_national_interest_rates.drop('National Average', axis = 1).drop('Top 100', axis = 1).drop('101 - 300', axis = 1).drop('301 - 500', axis = 1).drop('Bottom 500', axis = 1)\n",
    "corr_market_heat_national_interest_rates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 335,
   "id": "96350932-3f7d-4f9e-913a-ee2c59d030cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Federal Funds Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>National Average</th>\n",
       "      <td>0.279033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Top 100</th>\n",
       "      <td>0.076694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101 - 300</th>\n",
       "      <td>0.422720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>301 - 500</th>\n",
       "      <td>0.516546</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bottom 500</th>\n",
       "      <td>0.543906</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Federal Funds Rate</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Federal Funds Rate\n",
       "National Average              0.279033\n",
       "Top 100                       0.076694\n",
       "101 - 300                     0.422720\n",
       "301 - 500                     0.516546\n",
       "Bottom 500                    0.543906\n",
       "Federal Funds Rate            1.000000"
      ]
     },
     "execution_count": 335,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "market_heat_index_vs_interest_rate_df_prepandemic = market_heat_index_vs_interest_rate_df[(market_heat_index_vs_interest_rate_df['Date'] >= prepandemic_start) & (market_heat_index_vs_interest_rate_df['Date'] <= prepandemic_end)]\n",
    "corr_market_heat_national_interest_rates_prepandemic = market_heat_index_vs_interest_rate_df_prepandemic.drop('Date', axis = 1).corr()\n",
    "corr_market_heat_national_interest_rates_prepandemic = corr_market_heat_national_interest_rates_prepandemic.drop('National Average', axis = 1).drop('Top 100', axis = 1).drop('101 - 300', axis = 1).drop('301 - 500', axis = 1).drop('Bottom 500', axis = 1)\n",
    "corr_market_heat_national_interest_rates_prepandemic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 336,
   "id": "4b274aeb-42e1-4ded-b189-47f2aa3c617c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Federal Funds Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>National Average</th>\n",
       "      <td>-0.629758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Top 100</th>\n",
       "      <td>-0.540468</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101 - 300</th>\n",
       "      <td>-0.657547</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>301 - 500</th>\n",
       "      <td>-0.686324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bottom 500</th>\n",
       "      <td>-0.687434</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Federal Funds Rate</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Federal Funds Rate\n",
       "National Average             -0.629758\n",
       "Top 100                      -0.540468\n",
       "101 - 300                    -0.657547\n",
       "301 - 500                    -0.686324\n",
       "Bottom 500                   -0.687434\n",
       "Federal Funds Rate            1.000000"
      ]
     },
     "execution_count": 336,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "market_heat_index_vs_interest_rate_df_pandemic = market_heat_index_vs_interest_rate_df[(market_heat_index_vs_interest_rate_df['Date'] >= pandemic_start) & (market_heat_index_vs_interest_rate_df['Date'] <= pandemic_end)]\n",
    "corr_market_heat_national_interest_rates_pandemic = market_heat_index_vs_interest_rate_df_pandemic.drop('Date', axis = 1).corr()\n",
    "corr_market_heat_national_interest_rates_pandemic = corr_market_heat_national_interest_rates_pandemic.drop('National Average', axis = 1).drop('Top 100', axis = 1).drop('101 - 300', axis = 1).drop('301 - 500', axis = 1).drop('Bottom 500', axis = 1)\n",
    "corr_market_heat_national_interest_rates_pandemic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 348,
   "id": "a09a3465-a96a-462d-b6ee-b170aa21f3c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Federal Funds Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>National Average</th>\n",
       "      <td>-0.715264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Top 100</th>\n",
       "      <td>-0.589170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101 - 300</th>\n",
       "      <td>-0.707620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>301 - 500</th>\n",
       "      <td>-0.673688</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bottom 500</th>\n",
       "      <td>-0.727605</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Federal Funds Rate</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Federal Funds Rate\n",
       "National Average             -0.715264\n",
       "Top 100                      -0.589170\n",
       "101 - 300                    -0.707620\n",
       "301 - 500                    -0.673688\n",
       "Bottom 500                   -0.727605\n",
       "Federal Funds Rate            1.000000"
      ]
     },
     "execution_count": 348,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "market_heat_index_vs_interest_rate_df_postpandemic = market_heat_index_vs_interest_rate_df[(market_heat_index_vs_interest_rate_df['Date'] >= postpandemic_start) & (market_heat_index_vs_interest_rate_df['Date'] <= postpandemic_end)]\n",
    "corr_market_heat_national_interest_rates_postpandemic = market_heat_index_vs_interest_rate_df_postpandemic.drop('Date', axis = 1).corr()\n",
    "corr_market_heat_national_interest_rates_postpandemic = corr_market_heat_national_interest_rates_postpandemic.drop('National Average', axis = 1).drop('Top 100', axis = 1).drop('101 - 300', axis = 1).drop('301 - 500', axis = 1).drop('Bottom 500', axis = 1)\n",
    "corr_market_heat_national_interest_rates_postpandemic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 353,
   "id": "b407819e-ab39-48b0-ae6f-38f46b1bbfb1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Period</th>\n",
       "      <th>National Average</th>\n",
       "      <th>Top 100</th>\n",
       "      <th>101 - 300</th>\n",
       "      <th>301 - 500</th>\n",
       "      <th>Bottom 500</th>\n",
       "      <th>Federal Funds Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Pre-Pandemic</td>\n",
       "      <td>0.279033</td>\n",
       "      <td>0.076694</td>\n",
       "      <td>0.422720</td>\n",
       "      <td>0.516546</td>\n",
       "      <td>0.543906</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Pandemic</td>\n",
       "      <td>-0.629758</td>\n",
       "      <td>-0.540468</td>\n",
       "      <td>-0.657547</td>\n",
       "      <td>-0.686324</td>\n",
       "      <td>-0.687434</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Post-Pandemic</td>\n",
       "      <td>-0.715264</td>\n",
       "      <td>-0.589170</td>\n",
       "      <td>-0.707620</td>\n",
       "      <td>-0.673688</td>\n",
       "      <td>-0.727605</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Period  National Average   Top 100  101 - 300  301 - 500  \\\n",
       "0   Pre-Pandemic          0.279033  0.076694   0.422720   0.516546   \n",
       "1       Pandemic         -0.629758 -0.540468  -0.657547  -0.686324   \n",
       "2  Post-Pandemic         -0.715264 -0.589170  -0.707620  -0.673688   \n",
       "\n",
       "   Bottom 500  Federal Funds Rate  \n",
       "0    0.543906                 1.0  \n",
       "1   -0.687434                 1.0  \n",
       "2   -0.727605                 1.0  "
      ]
     },
     "execution_count": 353,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "corr_graph = corr_market_heat_national_interest_rates_prepandemic.copy().rename(columns={'Federal Funds Rate': 'Pre-Pandemic'})\n",
    "corr_graph[\"Pandemic\"] = corr_market_heat_national_interest_rates_pandemic[\"Federal Funds Rate\"]\n",
    "corr_graph[\"Post-Pandemic\"] = corr_market_heat_national_interest_rates_postpandemic[\"Federal Funds Rate\"]\n",
    "corr_graph = corr_graph.T\n",
    "corr_graph = corr_graph.reset_index()\n",
    "corr_graph.rename(columns={'index': 'Period'}, inplace=True)\n",
    "corr_graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 358,
   "id": "db794315-20a6-4a09-8f42-0ee181985eaa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(close=None, block=None)>"
      ]
     },
     "execution_count": 358,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(corr_graph[\"Period\"],corr_graph[\"National Average\"],label = \"National Average\", color = \"orange\")\n",
    "plt.grid(True)\n",
    "plt.title(\"Correlation between Market Heat Index and Interest Rates\")\n",
    "plt.xlabel(\"Time Period\")\n",
    "plt.ylabel(\"Correlation between MHI and FFR\")\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "id": "41c603b9-ed7b-43f9-93cd-9163edbe645f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>AK</th>\n",
       "      <th>AL</th>\n",
       "      <th>AR</th>\n",
       "      <th>AZ</th>\n",
       "      <th>CA</th>\n",
       "      <th>CO</th>\n",
       "      <th>CT</th>\n",
       "      <th>DE</th>\n",
       "      <th>FL</th>\n",
       "      <th>...</th>\n",
       "      <th>TX</th>\n",
       "      <th>US</th>\n",
       "      <th>UT</th>\n",
       "      <th>VA</th>\n",
       "      <th>VT</th>\n",
       "      <th>WA</th>\n",
       "      <th>WI</th>\n",
       "      <th>WV</th>\n",
       "      <th>WY</th>\n",
       "      <th>Federal Funds Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-01-31</td>\n",
       "      <td>62.25</td>\n",
       "      <td>28.857143</td>\n",
       "      <td>29.941176</td>\n",
       "      <td>35.909091</td>\n",
       "      <td>54.676471</td>\n",
       "      <td>48.058824</td>\n",
       "      <td>40.4</td>\n",
       "      <td>42.5</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>38.968254</td>\n",
       "      <td>49.0</td>\n",
       "      <td>55.555556</td>\n",
       "      <td>32.071429</td>\n",
       "      <td>17.25</td>\n",
       "      <td>56.45</td>\n",
       "      <td>44.000000</td>\n",
       "      <td>-6.250000</td>\n",
       "      <td>30.777778</td>\n",
       "      <td>1.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-02-28</td>\n",
       "      <td>57.75</td>\n",
       "      <td>30.100000</td>\n",
       "      <td>32.266667</td>\n",
       "      <td>36.727273</td>\n",
       "      <td>53.030303</td>\n",
       "      <td>52.764706</td>\n",
       "      <td>43.0</td>\n",
       "      <td>42.5</td>\n",
       "      <td>34.517241</td>\n",
       "      <td>...</td>\n",
       "      <td>39.354839</td>\n",
       "      <td>50.0</td>\n",
       "      <td>56.750000</td>\n",
       "      <td>32.785714</td>\n",
       "      <td>19.75</td>\n",
       "      <td>58.00</td>\n",
       "      <td>48.652174</td>\n",
       "      <td>-5.142857</td>\n",
       "      <td>32.444444</td>\n",
       "      <td>1.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-03-31</td>\n",
       "      <td>49.50</td>\n",
       "      <td>33.400000</td>\n",
       "      <td>35.066667</td>\n",
       "      <td>40.181818</td>\n",
       "      <td>54.205882</td>\n",
       "      <td>56.176471</td>\n",
       "      <td>47.2</td>\n",
       "      <td>44.5</td>\n",
       "      <td>36.285714</td>\n",
       "      <td>...</td>\n",
       "      <td>42.409836</td>\n",
       "      <td>52.0</td>\n",
       "      <td>56.111111</td>\n",
       "      <td>34.714286</td>\n",
       "      <td>22.50</td>\n",
       "      <td>62.75</td>\n",
       "      <td>55.652174</td>\n",
       "      <td>2.875000</td>\n",
       "      <td>36.500000</td>\n",
       "      <td>1.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-04-30</td>\n",
       "      <td>44.50</td>\n",
       "      <td>35.473684</td>\n",
       "      <td>39.875000</td>\n",
       "      <td>43.363636</td>\n",
       "      <td>56.787879</td>\n",
       "      <td>55.470588</td>\n",
       "      <td>47.8</td>\n",
       "      <td>46.0</td>\n",
       "      <td>40.172414</td>\n",
       "      <td>...</td>\n",
       "      <td>45.015873</td>\n",
       "      <td>54.0</td>\n",
       "      <td>56.777778</td>\n",
       "      <td>36.214286</td>\n",
       "      <td>23.25</td>\n",
       "      <td>66.70</td>\n",
       "      <td>58.304348</td>\n",
       "      <td>4.428571</td>\n",
       "      <td>39.500000</td>\n",
       "      <td>1.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-05-31</td>\n",
       "      <td>50.75</td>\n",
       "      <td>35.400000</td>\n",
       "      <td>41.687500</td>\n",
       "      <td>44.181818</td>\n",
       "      <td>57.333333</td>\n",
       "      <td>54.529412</td>\n",
       "      <td>48.0</td>\n",
       "      <td>46.5</td>\n",
       "      <td>41.896552</td>\n",
       "      <td>...</td>\n",
       "      <td>46.854839</td>\n",
       "      <td>54.0</td>\n",
       "      <td>57.777778</td>\n",
       "      <td>36.428571</td>\n",
       "      <td>25.25</td>\n",
       "      <td>65.90</td>\n",
       "      <td>58.695652</td>\n",
       "      <td>6.714286</td>\n",
       "      <td>40.222222</td>\n",
       "      <td>1.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>2023-08-31</td>\n",
       "      <td>69.75</td>\n",
       "      <td>50.480000</td>\n",
       "      <td>44.476190</td>\n",
       "      <td>51.000000</td>\n",
       "      <td>62.117647</td>\n",
       "      <td>47.823529</td>\n",
       "      <td>85.6</td>\n",
       "      <td>61.5</td>\n",
       "      <td>38.517241</td>\n",
       "      <td>...</td>\n",
       "      <td>43.084507</td>\n",
       "      <td>62.0</td>\n",
       "      <td>52.777778</td>\n",
       "      <td>69.642857</td>\n",
       "      <td>74.50</td>\n",
       "      <td>51.40</td>\n",
       "      <td>67.347826</td>\n",
       "      <td>56.000000</td>\n",
       "      <td>51.777778</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>2023-09-30</td>\n",
       "      <td>66.50</td>\n",
       "      <td>46.120000</td>\n",
       "      <td>42.142857</td>\n",
       "      <td>49.363636</td>\n",
       "      <td>57.676471</td>\n",
       "      <td>45.764706</td>\n",
       "      <td>82.0</td>\n",
       "      <td>57.5</td>\n",
       "      <td>37.107143</td>\n",
       "      <td>...</td>\n",
       "      <td>40.478873</td>\n",
       "      <td>58.0</td>\n",
       "      <td>52.111111</td>\n",
       "      <td>63.857143</td>\n",
       "      <td>66.75</td>\n",
       "      <td>46.50</td>\n",
       "      <td>59.913043</td>\n",
       "      <td>51.125000</td>\n",
       "      <td>46.222222</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>2023-10-31</td>\n",
       "      <td>60.25</td>\n",
       "      <td>41.960000</td>\n",
       "      <td>40.666667</td>\n",
       "      <td>45.818182</td>\n",
       "      <td>54.647059</td>\n",
       "      <td>43.437500</td>\n",
       "      <td>75.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>35.428571</td>\n",
       "      <td>...</td>\n",
       "      <td>37.985915</td>\n",
       "      <td>55.0</td>\n",
       "      <td>50.333333</td>\n",
       "      <td>56.571429</td>\n",
       "      <td>56.75</td>\n",
       "      <td>43.70</td>\n",
       "      <td>51.130435</td>\n",
       "      <td>46.750000</td>\n",
       "      <td>45.555556</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>2023-11-30</td>\n",
       "      <td>51.75</td>\n",
       "      <td>40.440000</td>\n",
       "      <td>39.904762</td>\n",
       "      <td>42.636364</td>\n",
       "      <td>55.454545</td>\n",
       "      <td>42.000000</td>\n",
       "      <td>72.6</td>\n",
       "      <td>52.0</td>\n",
       "      <td>34.814815</td>\n",
       "      <td>...</td>\n",
       "      <td>38.800000</td>\n",
       "      <td>53.0</td>\n",
       "      <td>49.777778</td>\n",
       "      <td>53.071429</td>\n",
       "      <td>54.50</td>\n",
       "      <td>44.45</td>\n",
       "      <td>46.086957</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>42.000000</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>2023-12-31</td>\n",
       "      <td>63.00</td>\n",
       "      <td>41.480000</td>\n",
       "      <td>39.952381</td>\n",
       "      <td>43.636364</td>\n",
       "      <td>60.558824</td>\n",
       "      <td>44.352941</td>\n",
       "      <td>78.8</td>\n",
       "      <td>51.0</td>\n",
       "      <td>32.714286</td>\n",
       "      <td>...</td>\n",
       "      <td>40.414286</td>\n",
       "      <td>55.0</td>\n",
       "      <td>51.111111</td>\n",
       "      <td>54.857143</td>\n",
       "      <td>60.00</td>\n",
       "      <td>48.70</td>\n",
       "      <td>51.045455</td>\n",
       "      <td>47.875000</td>\n",
       "      <td>49.888889</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>72 rows Ã— 53 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date     AK         AL         AR         AZ         CA         CO  \\\n",
       "0  2018-01-31  62.25  28.857143  29.941176  35.909091  54.676471  48.058824   \n",
       "1  2018-02-28  57.75  30.100000  32.266667  36.727273  53.030303  52.764706   \n",
       "2  2018-03-31  49.50  33.400000  35.066667  40.181818  54.205882  56.176471   \n",
       "3  2018-04-30  44.50  35.473684  39.875000  43.363636  56.787879  55.470588   \n",
       "4  2018-05-31  50.75  35.400000  41.687500  44.181818  57.333333  54.529412   \n",
       "..        ...    ...        ...        ...        ...        ...        ...   \n",
       "67 2023-08-31  69.75  50.480000  44.476190  51.000000  62.117647  47.823529   \n",
       "68 2023-09-30  66.50  46.120000  42.142857  49.363636  57.676471  45.764706   \n",
       "69 2023-10-31  60.25  41.960000  40.666667  45.818182  54.647059  43.437500   \n",
       "70 2023-11-30  51.75  40.440000  39.904762  42.636364  55.454545  42.000000   \n",
       "71 2023-12-31  63.00  41.480000  39.952381  43.636364  60.558824  44.352941   \n",
       "\n",
       "      CT    DE         FL  ...         TX    US         UT         VA     VT  \\\n",
       "0   40.4  42.5  36.000000  ...  38.968254  49.0  55.555556  32.071429  17.25   \n",
       "1   43.0  42.5  34.517241  ...  39.354839  50.0  56.750000  32.785714  19.75   \n",
       "2   47.2  44.5  36.285714  ...  42.409836  52.0  56.111111  34.714286  22.50   \n",
       "3   47.8  46.0  40.172414  ...  45.015873  54.0  56.777778  36.214286  23.25   \n",
       "4   48.0  46.5  41.896552  ...  46.854839  54.0  57.777778  36.428571  25.25   \n",
       "..   ...   ...        ...  ...        ...   ...        ...        ...    ...   \n",
       "67  85.6  61.5  38.517241  ...  43.084507  62.0  52.777778  69.642857  74.50   \n",
       "68  82.0  57.5  37.107143  ...  40.478873  58.0  52.111111  63.857143  66.75   \n",
       "69  75.0  54.0  35.428571  ...  37.985915  55.0  50.333333  56.571429  56.75   \n",
       "70  72.6  52.0  34.814815  ...  38.800000  53.0  49.777778  53.071429  54.50   \n",
       "71  78.8  51.0  32.714286  ...  40.414286  55.0  51.111111  54.857143  60.00   \n",
       "\n",
       "       WA         WI         WV         WY  Federal Funds Rate  \n",
       "0   56.45  44.000000  -6.250000  30.777778                1.42  \n",
       "1   58.00  48.652174  -5.142857  32.444444                1.42  \n",
       "2   62.75  55.652174   2.875000  36.500000                1.51  \n",
       "3   66.70  58.304348   4.428571  39.500000                1.69  \n",
       "4   65.90  58.695652   6.714286  40.222222                1.70  \n",
       "..    ...        ...        ...        ...                 ...  \n",
       "67  51.40  67.347826  56.000000  51.777778                5.33  \n",
       "68  46.50  59.913043  51.125000  46.222222                5.33  \n",
       "69  43.70  51.130435  46.750000  45.555556                5.33  \n",
       "70  44.45  46.086957  45.000000  42.000000                5.33  \n",
       "71  48.70  51.045455  47.875000  49.888889                5.33  \n",
       "\n",
       "[72 rows x 53 columns]"
      ]
     },
     "execution_count": 277,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "state_market_index_vs_interest_rate_df = pd.merge(market_heat_index_df_state, interest_rates_df, on=\"Date\", how='inner')\n",
    "state_market_index_vs_interest_rate_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "id": "89e30baf-0b4e-4516-935e-cd70eec77b80",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(state_market_index_vs_interest_rate_df['Date'], state_market_index_vs_interest_rate_df['US']/100, label = \"National Average\", color = \"orange\")\n",
    "plt.plot(state_market_index_vs_interest_rate_df['Date'], state_market_index_vs_interest_rate_df['NY']/100, label = \"New York\", color = \"gold\")\n",
    "plt.plot(market_heat_index_vs_interest_rate_df['Date'], market_heat_index_vs_interest_rate_df['Federal Funds Rate']/10, label = \"Federal Funds Rate\", color  = \"red\")\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.xlabel(\"Time\")\n",
    "plt.ylabel(\"Market Heat Index\")\n",
    "plt.yticks([0.10, 0.30, 0.50, 0.70, 0.90])\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "id": "6a823ab8-2be0-4da2-abf5-37e83eff39d4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RegionID</th>\n",
       "      <th>Size Rank</th>\n",
       "      <th>Size Segment</th>\n",
       "      <th>Metro Area</th>\n",
       "      <th>State</th>\n",
       "      <th>2018-01-31</th>\n",
       "      <th>2018-02-28</th>\n",
       "      <th>2018-03-31</th>\n",
       "      <th>2018-04-30</th>\n",
       "      <th>2018-05-31</th>\n",
       "      <th>...</th>\n",
       "      <th>2023-03-31</th>\n",
       "      <th>2023-04-30</th>\n",
       "      <th>2023-05-31</th>\n",
       "      <th>2023-06-30</th>\n",
       "      <th>2023-07-31</th>\n",
       "      <th>2023-08-31</th>\n",
       "      <th>2023-09-30</th>\n",
       "      <th>2023-10-31</th>\n",
       "      <th>2023-11-30</th>\n",
       "      <th>2023-12-31</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>102001</td>\n",
       "      <td>0</td>\n",
       "      <td>National Average</td>\n",
       "      <td>United States</td>\n",
       "      <td>US</td>\n",
       "      <td>49.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>...</td>\n",
       "      <td>67.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>55.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>394913</td>\n",
       "      <td>1</td>\n",
       "      <td>New York City</td>\n",
       "      <td>New York, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>50.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>...</td>\n",
       "      <td>82.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>73.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>394425</td>\n",
       "      <td>50</td>\n",
       "      <td>Top 100</td>\n",
       "      <td>Buffalo, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>54.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>...</td>\n",
       "      <td>127.0</td>\n",
       "      <td>122.0</td>\n",
       "      <td>114.0</td>\n",
       "      <td>105.0</td>\n",
       "      <td>99.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>92.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>395031</td>\n",
       "      <td>52</td>\n",
       "      <td>Top 100</td>\n",
       "      <td>Rochester, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>36.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>...</td>\n",
       "      <td>168.0</td>\n",
       "      <td>168.0</td>\n",
       "      <td>167.0</td>\n",
       "      <td>171.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>159.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>165.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>394308</td>\n",
       "      <td>64</td>\n",
       "      <td>Top 100</td>\n",
       "      <td>Albany, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>40.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>...</td>\n",
       "      <td>94.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>87.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>69.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>845159</td>\n",
       "      <td>86</td>\n",
       "      <td>Top 100</td>\n",
       "      <td>Poughkeepsie, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>41.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>...</td>\n",
       "      <td>81.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>66.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>395143</td>\n",
       "      <td>91</td>\n",
       "      <td>Top 100</td>\n",
       "      <td>Syracuse, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>41.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>...</td>\n",
       "      <td>125.0</td>\n",
       "      <td>117.0</td>\n",
       "      <td>115.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>106.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>97.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>167</th>\n",
       "      <td>395179</td>\n",
       "      <td>169</td>\n",
       "      <td>101 - 300</td>\n",
       "      <td>Utica, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>29.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>...</td>\n",
       "      <td>71.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>51.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>394387</td>\n",
       "      <td>195</td>\n",
       "      <td>101 - 300</td>\n",
       "      <td>Binghamton, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>23.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>...</td>\n",
       "      <td>83.0</td>\n",
       "      <td>87.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>56.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>237</th>\n",
       "      <td>394748</td>\n",
       "      <td>241</td>\n",
       "      <td>101 - 300</td>\n",
       "      <td>Kingston, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>32.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>...</td>\n",
       "      <td>87.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>77.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>52.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>324</th>\n",
       "      <td>394719</td>\n",
       "      <td>328</td>\n",
       "      <td>301 - 500</td>\n",
       "      <td>Jamestown, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>17.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>...</td>\n",
       "      <td>77.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>327</th>\n",
       "      <td>394633</td>\n",
       "      <td>331</td>\n",
       "      <td>301 - 500</td>\n",
       "      <td>Glens Falls, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>34.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>...</td>\n",
       "      <td>78.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>59.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>346</th>\n",
       "      <td>395213</td>\n",
       "      <td>351</td>\n",
       "      <td>301 - 500</td>\n",
       "      <td>Watertown, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>24.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>...</td>\n",
       "      <td>73.0</td>\n",
       "      <td>77.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>364</th>\n",
       "      <td>394932</td>\n",
       "      <td>369</td>\n",
       "      <td>301 - 500</td>\n",
       "      <td>Ogdensburg, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>6.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>...</td>\n",
       "      <td>49.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>31.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>371</th>\n",
       "      <td>394709</td>\n",
       "      <td>376</td>\n",
       "      <td>301 - 500</td>\n",
       "      <td>Ithaca, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>37.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>...</td>\n",
       "      <td>105.0</td>\n",
       "      <td>97.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>78.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>79.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>407</th>\n",
       "      <td>394501</td>\n",
       "      <td>413</td>\n",
       "      <td>301 - 500</td>\n",
       "      <td>Corning, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>11.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>...</td>\n",
       "      <td>69.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>33.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>425</th>\n",
       "      <td>394568</td>\n",
       "      <td>432</td>\n",
       "      <td>301 - 500</td>\n",
       "      <td>Elmira, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>-2.0</td>\n",
       "      <td>-2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>...</td>\n",
       "      <td>86.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>103.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>51.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>445</th>\n",
       "      <td>394986</td>\n",
       "      <td>452</td>\n",
       "      <td>301 - 500</td>\n",
       "      <td>Plattsburgh, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>...</td>\n",
       "      <td>35.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>452</th>\n",
       "      <td>394936</td>\n",
       "      <td>459</td>\n",
       "      <td>301 - 500</td>\n",
       "      <td>Olean, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>-6.0</td>\n",
       "      <td>-4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>...</td>\n",
       "      <td>79.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>457</th>\n",
       "      <td>394350</td>\n",
       "      <td>464</td>\n",
       "      <td>301 - 500</td>\n",
       "      <td>Auburn, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>3.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>...</td>\n",
       "      <td>66.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>62.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>520</th>\n",
       "      <td>394693</td>\n",
       "      <td>528</td>\n",
       "      <td>Bottom 500</td>\n",
       "      <td>Hudson, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>18.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>...</td>\n",
       "      <td>64.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>32.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>534</th>\n",
       "      <td>394939</td>\n",
       "      <td>542</td>\n",
       "      <td>Bottom 500</td>\n",
       "      <td>Oneonta, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>12.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>17.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>537</th>\n",
       "      <td>394365</td>\n",
       "      <td>545</td>\n",
       "      <td>Bottom 500</td>\n",
       "      <td>Batavia, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>...</td>\n",
       "      <td>106.0</td>\n",
       "      <td>87.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>97.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>82.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>571</th>\n",
       "      <td>394634</td>\n",
       "      <td>579</td>\n",
       "      <td>Bottom 500</td>\n",
       "      <td>Gloversville, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>24.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>...</td>\n",
       "      <td>63.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>41.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>599</th>\n",
       "      <td>394326</td>\n",
       "      <td>607</td>\n",
       "      <td>Bottom 500</td>\n",
       "      <td>Amsterdam, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>...</td>\n",
       "      <td>59.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>29.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>613</th>\n",
       "      <td>394819</td>\n",
       "      <td>621</td>\n",
       "      <td>Bottom 500</td>\n",
       "      <td>Malone, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>...</td>\n",
       "      <td>43.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>621</th>\n",
       "      <td>394504</td>\n",
       "      <td>629</td>\n",
       "      <td>Bottom 500</td>\n",
       "      <td>Cortland, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>...</td>\n",
       "      <td>95.0</td>\n",
       "      <td>105.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>775</th>\n",
       "      <td>395084</td>\n",
       "      <td>784</td>\n",
       "      <td>Bottom 500</td>\n",
       "      <td>Seneca Falls, NY</td>\n",
       "      <td>NY</td>\n",
       "      <td>7.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>...</td>\n",
       "      <td>83.0</td>\n",
       "      <td>93.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>62.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>28 rows Ã— 77 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     RegionID  Size Rank      Size Segment        Metro Area State  \\\n",
       "0      102001          0  National Average     United States    US   \n",
       "1      394913          1     New York City      New York, NY    NY   \n",
       "49     394425         50           Top 100       Buffalo, NY    NY   \n",
       "51     395031         52           Top 100     Rochester, NY    NY   \n",
       "63     394308         64           Top 100        Albany, NY    NY   \n",
       "85     845159         86           Top 100  Poughkeepsie, NY    NY   \n",
       "90     395143         91           Top 100      Syracuse, NY    NY   \n",
       "167    395179        169         101 - 300         Utica, NY    NY   \n",
       "193    394387        195         101 - 300    Binghamton, NY    NY   \n",
       "237    394748        241         101 - 300      Kingston, NY    NY   \n",
       "324    394719        328         301 - 500     Jamestown, NY    NY   \n",
       "327    394633        331         301 - 500   Glens Falls, NY    NY   \n",
       "346    395213        351         301 - 500     Watertown, NY    NY   \n",
       "364    394932        369         301 - 500    Ogdensburg, NY    NY   \n",
       "371    394709        376         301 - 500        Ithaca, NY    NY   \n",
       "407    394501        413         301 - 500       Corning, NY    NY   \n",
       "425    394568        432         301 - 500        Elmira, NY    NY   \n",
       "445    394986        452         301 - 500   Plattsburgh, NY    NY   \n",
       "452    394936        459         301 - 500         Olean, NY    NY   \n",
       "457    394350        464         301 - 500        Auburn, NY    NY   \n",
       "520    394693        528        Bottom 500        Hudson, NY    NY   \n",
       "534    394939        542        Bottom 500       Oneonta, NY    NY   \n",
       "537    394365        545        Bottom 500       Batavia, NY    NY   \n",
       "571    394634        579        Bottom 500  Gloversville, NY    NY   \n",
       "599    394326        607        Bottom 500     Amsterdam, NY    NY   \n",
       "613    394819        621        Bottom 500        Malone, NY    NY   \n",
       "621    394504        629        Bottom 500      Cortland, NY    NY   \n",
       "775    395084        784        Bottom 500  Seneca Falls, NY    NY   \n",
       "\n",
       "     2018-01-31  2018-02-28  2018-03-31  2018-04-30  2018-05-31  ...  \\\n",
       "0          49.0        50.0        52.0        54.0        54.0  ...   \n",
       "1          50.0        51.0        54.0        56.0        55.0  ...   \n",
       "49         54.0        59.0        74.0        86.0        84.0  ...   \n",
       "51         36.0        41.0        57.0        65.0        65.0  ...   \n",
       "63         40.0        40.0        50.0        60.0        62.0  ...   \n",
       "85         41.0        43.0        52.0        59.0        58.0  ...   \n",
       "90         41.0        42.0        46.0        50.0        52.0  ...   \n",
       "167        29.0        29.0        31.0        36.0        33.0  ...   \n",
       "193        23.0        23.0        26.0        31.0        36.0  ...   \n",
       "237        32.0        32.0        41.0        48.0        47.0  ...   \n",
       "324        17.0        20.0        24.0        21.0        24.0  ...   \n",
       "327        34.0        32.0        35.0        39.0        41.0  ...   \n",
       "346        24.0        24.0        27.0        28.0        28.0  ...   \n",
       "364         6.0         4.0         5.0        12.0        12.0  ...   \n",
       "371        37.0        44.0        51.0        54.0        47.0  ...   \n",
       "407        11.0        13.0        17.0        24.0        26.0  ...   \n",
       "425        -2.0        -2.0         7.0        17.0        25.0  ...   \n",
       "445        -1.0         6.0        17.0        17.0        19.0  ...   \n",
       "452        -6.0        -4.0         1.0        10.0        12.0  ...   \n",
       "457         3.0         6.0        13.0        20.0        25.0  ...   \n",
       "520        18.0        17.0        25.0        28.0        34.0  ...   \n",
       "534        12.0         8.0        11.0        26.0        27.0  ...   \n",
       "537         5.0         6.0        20.0        38.0        39.0  ...   \n",
       "571        24.0        19.0        30.0        36.0        36.0  ...   \n",
       "599        -1.0         0.0        19.0        30.0        31.0  ...   \n",
       "613         2.0        -2.0         2.0         8.0        10.0  ...   \n",
       "621         8.0         8.0        15.0        26.0        33.0  ...   \n",
       "775         7.0        25.0        29.0        18.0        25.0  ...   \n",
       "\n",
       "     2023-03-31  2023-04-30  2023-05-31  2023-06-30  2023-07-31  2023-08-31  \\\n",
       "0          67.0        68.0        66.0        65.0        64.0        62.0   \n",
       "1          82.0        82.0        80.0        79.0        83.0        82.0   \n",
       "49        127.0       122.0       114.0       105.0        99.0        98.0   \n",
       "51        168.0       168.0       167.0       171.0       172.0       159.0   \n",
       "63         94.0        96.0        96.0        95.0        95.0        87.0   \n",
       "85         81.0        82.0        80.0        80.0        85.0        82.0   \n",
       "90        125.0       117.0       115.0       113.0       108.0       106.0   \n",
       "167        71.0        75.0        70.0        69.0        71.0        68.0   \n",
       "193        83.0        87.0        90.0        88.0        85.0        75.0   \n",
       "237        87.0        80.0        82.0        79.0        77.0        74.0   \n",
       "324        77.0        69.0        65.0        62.0        66.0        64.0   \n",
       "327        78.0        76.0        72.0        69.0        68.0        67.0   \n",
       "346        73.0        77.0        70.0        66.0        68.0        73.0   \n",
       "364        49.0        59.0        54.0        48.0        39.0        30.0   \n",
       "371       105.0        97.0        89.0        78.0        85.0        83.0   \n",
       "407        69.0        65.0        63.0        57.0        61.0        61.0   \n",
       "425        86.0        85.0        66.0        60.0        84.0       108.0   \n",
       "445        35.0        37.0        31.0        26.0        33.0        40.0   \n",
       "452        79.0        75.0        65.0        68.0        74.0        69.0   \n",
       "457        66.0        70.0        74.0        89.0        94.0        86.0   \n",
       "520        64.0        69.0        62.0        59.0        59.0        55.0   \n",
       "534         NaN        31.0        23.0        17.0        23.0        27.0   \n",
       "537       106.0        87.0        91.0        90.0        95.0        85.0   \n",
       "571        63.0        63.0        53.0        44.0        48.0        58.0   \n",
       "599        59.0        57.0        72.0        75.0        63.0        55.0   \n",
       "613        43.0        54.0        52.0        48.0        38.0        40.0   \n",
       "621        95.0       105.0        94.0        94.0        89.0        81.0   \n",
       "775        83.0        93.0        74.0        61.0        74.0        82.0   \n",
       "\n",
       "     2023-09-30  2023-10-31  2023-11-30  2023-12-31  \n",
       "0          58.0        55.0        53.0        55.0  \n",
       "1          75.0        66.0        65.0        73.0  \n",
       "49         88.0        76.0        72.0        92.0  \n",
       "51        140.0       130.0       130.0       165.0  \n",
       "63         76.0        67.0        64.0        69.0  \n",
       "85         72.0        60.0        56.0        66.0  \n",
       "90        102.0        95.0        90.0        97.0  \n",
       "167        58.0        53.0        52.0        51.0  \n",
       "193        62.0        55.0        51.0        56.0  \n",
       "237        71.0        59.0        51.0        52.0  \n",
       "324        65.0        59.0        49.0        49.0  \n",
       "327        63.0        59.0        54.0        59.0  \n",
       "346        66.0        55.0        44.0        47.0  \n",
       "364        20.0        23.0        29.0        31.0  \n",
       "371        76.0        70.0        76.0        79.0  \n",
       "407        56.0        45.0        36.0        33.0  \n",
       "425       103.0        81.0        64.0        51.0  \n",
       "445        37.0        29.0        19.0        15.0  \n",
       "452        48.0        36.0        39.0        43.0  \n",
       "457        64.0        57.0        57.0        62.0  \n",
       "520        43.0        35.0        35.0        32.0  \n",
       "534        12.0        10.0         NaN        17.0  \n",
       "537        97.0        89.0        82.0        82.0  \n",
       "571        55.0        46.0        39.0        41.0  \n",
       "599        52.0        49.0        30.0        29.0  \n",
       "613        33.0        36.0        31.0        24.0  \n",
       "621        69.0        69.0        59.0        58.0  \n",
       "775        67.0        42.0        52.0        62.0  \n",
       "\n",
       "[28 rows x 77 columns]"
      ]
     },
     "execution_count": 279,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Copy Market Heat Index Data Frame\n",
    "ny_market_heat_index_df = market_heat_index_df.copy()\n",
    "# Filter Data Frame to just metro areas in the state of New York, plus the national average\n",
    "ny_market_heat_index_df = ny_market_heat_index_df[(market_heat_index_df['State'] == 'NY') | (ny_market_heat_index_df ['State'] == 'US')]\n",
    "# Convert Size Segment to column, insert a specific size segment for New York City alone, then convert back to category data type\n",
    "ny_market_heat_index_df['Size Segment'] = ny_market_heat_index_df['Size Segment'].astype('object')\n",
    "ny_market_heat_index_df.loc[1, 'Size Segment'] = 'New York City'\n",
    "ny_market_heat_index_df['Size Segment'] = ny_market_heat_index_df['Size Segment'].astype('category')\n",
    "ny_market_heat_index_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "id": "106ede2a-7982-4cbc-b3bf-b39bfee98135",
   "metadata": {},
   "outputs": [],
   "source": [
    "# --- Create a data frame segmented by size rank ---\n",
    "# Group by 'Size Segment' and calculate the mean for each segment\n",
    "ny_market_heat_index_df_size = ny_market_heat_index_df.groupby('Size Segment', observed = False).mean('Size Segment').drop('RegionID',  axis = 1).drop('Size Rank',  axis = 1)\n",
    "# Reset the index for better display\n",
    "ny_market_heat_index_df_size.reset_index(inplace=True)\n",
    "ny_market_heat_index_df_size.rename(columns={'Size Segment': 'Date'}, inplace = True)\n",
    "ny_market_heat_index_df_size.set_index('Date', inplace=True)\n",
    "ny_market_heat_index_df_size = ny_market_heat_index_df_size.T\n",
    "ny_market_heat_index_df_size.reset_index(inplace=True)\n",
    "ny_market_heat_index_df_size.rename(columns={'index': 'Date'}, inplace=True)\n",
    "ny_market_heat_index_df_size['Date'] = pd.to_datetime(ny_market_heat_index_df_size['Date'])\n",
    "ny_market_heat_index_df_size = pd.merge(ny_market_heat_index_df_size, interest_rates_df, on=\"Date\", how='inner')\n",
    "ny_market_heat_index_df_size['NY State'] = state_market_index_vs_interest_rate_df['NY']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "id": "15b225bf-c250-4eda-98cf-c30780ebc93d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>101 - 300</th>\n",
       "      <th>301 - 500</th>\n",
       "      <th>Bottom 500</th>\n",
       "      <th>National Average</th>\n",
       "      <th>New York City</th>\n",
       "      <th>Top 100</th>\n",
       "      <th>Federal Funds Rate</th>\n",
       "      <th>NY State</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-01-31</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>12.3</td>\n",
       "      <td>9.375000</td>\n",
       "      <td>49.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>42.4</td>\n",
       "      <td>1.42</td>\n",
       "      <td>20.148148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-02-28</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>14.3</td>\n",
       "      <td>10.125000</td>\n",
       "      <td>50.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>1.42</td>\n",
       "      <td>21.629630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-03-31</td>\n",
       "      <td>32.666667</td>\n",
       "      <td>19.7</td>\n",
       "      <td>18.875000</td>\n",
       "      <td>52.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>55.8</td>\n",
       "      <td>1.51</td>\n",
       "      <td>28.851852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-04-30</td>\n",
       "      <td>38.333333</td>\n",
       "      <td>24.2</td>\n",
       "      <td>26.250000</td>\n",
       "      <td>54.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>1.69</td>\n",
       "      <td>34.925926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-05-31</td>\n",
       "      <td>38.666667</td>\n",
       "      <td>25.9</td>\n",
       "      <td>29.375000</td>\n",
       "      <td>54.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>64.2</td>\n",
       "      <td>1.70</td>\n",
       "      <td>36.518519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>2023-08-31</td>\n",
       "      <td>72.333333</td>\n",
       "      <td>68.1</td>\n",
       "      <td>60.375000</td>\n",
       "      <td>62.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>106.4</td>\n",
       "      <td>5.33</td>\n",
       "      <td>73.888889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>2023-09-30</td>\n",
       "      <td>63.666667</td>\n",
       "      <td>59.8</td>\n",
       "      <td>53.500000</td>\n",
       "      <td>58.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>95.6</td>\n",
       "      <td>5.33</td>\n",
       "      <td>65.555556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>2023-10-31</td>\n",
       "      <td>55.666667</td>\n",
       "      <td>51.4</td>\n",
       "      <td>47.000000</td>\n",
       "      <td>55.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>85.6</td>\n",
       "      <td>5.33</td>\n",
       "      <td>57.444444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>2023-11-30</td>\n",
       "      <td>51.333333</td>\n",
       "      <td>46.7</td>\n",
       "      <td>46.857143</td>\n",
       "      <td>53.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>82.4</td>\n",
       "      <td>5.33</td>\n",
       "      <td>54.846154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>2023-12-31</td>\n",
       "      <td>53.000000</td>\n",
       "      <td>46.9</td>\n",
       "      <td>43.125000</td>\n",
       "      <td>55.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>97.8</td>\n",
       "      <td>5.33</td>\n",
       "      <td>56.851852</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>72 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date  101 - 300  301 - 500  Bottom 500  National Average  \\\n",
       "0  2018-01-31  28.000000       12.3    9.375000              49.0   \n",
       "1  2018-02-28  28.000000       14.3   10.125000              50.0   \n",
       "2  2018-03-31  32.666667       19.7   18.875000              52.0   \n",
       "3  2018-04-30  38.333333       24.2   26.250000              54.0   \n",
       "4  2018-05-31  38.666667       25.9   29.375000              54.0   \n",
       "..        ...        ...        ...         ...               ...   \n",
       "67 2023-08-31  72.333333       68.1   60.375000              62.0   \n",
       "68 2023-09-30  63.666667       59.8   53.500000              58.0   \n",
       "69 2023-10-31  55.666667       51.4   47.000000              55.0   \n",
       "70 2023-11-30  51.333333       46.7   46.857143              53.0   \n",
       "71 2023-12-31  53.000000       46.9   43.125000              55.0   \n",
       "\n",
       "    New York City  Top 100  Federal Funds Rate   NY State  \n",
       "0            50.0     42.4                1.42  20.148148  \n",
       "1            51.0     45.0                1.42  21.629630  \n",
       "2            54.0     55.8                1.51  28.851852  \n",
       "3            56.0     64.0                1.69  34.925926  \n",
       "4            55.0     64.2                1.70  36.518519  \n",
       "..            ...      ...                 ...        ...  \n",
       "67           82.0    106.4                5.33  73.888889  \n",
       "68           75.0     95.6                5.33  65.555556  \n",
       "69           66.0     85.6                5.33  57.444444  \n",
       "70           65.0     82.4                5.33  54.846154  \n",
       "71           73.0     97.8                5.33  56.851852  \n",
       "\n",
       "[72 rows x 9 columns]"
      ]
     },
     "execution_count": 281,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ny_market_heat_index_df_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 359,
   "id": "cbc0a223-decf-460f-9c9e-38a13242f98e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(ny_market_heat_index_df_size['Date'], ny_market_heat_index_df_size['NY State']/100, label = \"New York State Average\", color = \"gold\")\n",
    "plt.plot(ny_market_heat_index_df_size['Date'], ny_market_heat_index_df_size['New York City']/100, label = \"New York City\", color = \"cyan\")\n",
    "plt.plot(ny_market_heat_index_df_size['Date'], ny_market_heat_index_df_size['Top 100']/100, label = \"Top 100\", color = \"green\")\n",
    "plt.plot(ny_market_heat_index_df_size['Date'], ny_market_heat_index_df_size['101 - 300']/100, label = \"101 - 300\", color = \"blue\")\n",
    "plt.plot(ny_market_heat_index_df_size['Date'], ny_market_heat_index_df_size['301 - 500']/100, label = \"301 - 400\", color = \"violet\")\n",
    "plt.plot(ny_market_heat_index_df_size['Date'], ny_market_heat_index_df_size['Bottom 500']/100, label = \"Bottom 500\", color = \"pink\")\n",
    "plt.plot(ny_market_heat_index_df_size['Date'], ny_market_heat_index_df_size['Federal Funds Rate']/10, label = \"Federal Funds Rate\", color  = \"red\")\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.xlabel(\"Year\")\n",
    "plt.ylabel(\"Market Heat Index\")\n",
    "plt.yticks([0.10, 0.30, 0.50, 0.70, 0.90, 1.10, 1.30])\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 339,
   "id": "778b8d29-87f7-4ddd-a262-6bf70ca48585",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ANOVA Result: F_onewayResult(statistic=0.1526034985043434, pvalue=0.697944721004954)\n",
      "T-Test Result: TtestResult(statistic=-0.39064497757470723, pvalue=0.6979447210049508, df=44.0)\n"
     ]
    }
   ],
   "source": [
    "#Filter the data for the pandemic period (2020-2021)\n",
    "pandemic_data = ny_market_heat_index_df_size[ny_market_heat_index_df_size['Date'].between(pandemic_start, pandemic_end)]\n",
    "#Calculate the monthly percentage change in rent value index for each segment\n",
    "pandemic_data.set_index('Date', inplace=True)\n",
    "monthly_changes = pandemic_data.pct_change().dropna()\n",
    "#Group the monthly changes into Large and Small city segments\n",
    "large_city_changes = monthly_changes['New York City'].dropna()\n",
    "small_city_changes = monthly_changes[['Top 100', '101 - 300', '301 - 500', 'Bottom 500']].mean(axis=1).dropna()\n",
    "#Run the ANOVA and T-test with these multiple data points\n",
    "anova_result = stats.f_oneway(large_city_changes, small_city_changes)\n",
    "t_test_result = stats.ttest_ind(large_city_changes, small_city_changes)\n",
    "print(\"ANOVA Result:\", anova_result)\n",
    "print(\"T-Test Result:\", t_test_result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5bd9d567-8c89-4e93-8686-a7053616e4a8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2303aeb5-813e-463a-a623-1d353bf3c334",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a502135-2c41-4b4c-aee5-6b421799f88f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "id": "d25a391e-4515-4b17-9f1f-6d818a935ea9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# --- Correlation Matrix between all metrics we analyzed --- "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "id": "efb3a431-a416-4858-9717-c34cce09cf6a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# --- Set filepath for file to analyze ---\n",
    "# NOTE: Edit this for each new file being run\n",
    "zillow_csv_path = Path('Zillow_Data/Metro_invt_fs_uc_sfrcondo_sm_month.csv')\n",
    "zillow_metric_name = 'Housing Inventory'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "id": "dac20b97-b62f-4ab3-92f3-3fa7bbbe504e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created new dataframe: housing_inventory_df\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# --- Create a data frame containing the data from the CSV ---\n",
    "# Load the CSV\n",
    "zillow_df = pd.read_csv(zillow_csv_path)\n",
    "# Insert 'US' as the state name for the United States region, so it shows up in state summary\n",
    "zillow_df.at[0,\"StateName\"] = 'US'\n",
    "# Rename labels\n",
    "zillow_df.rename(columns={'SizeRank': 'Size Rank', 'RegionName': 'Metro Area', 'StateName': 'State' }, inplace=True)\n",
    "# Remove the RegionType column\n",
    "zillow_df = zillow_df.drop('RegionType', axis = 1)\n",
    "# Insert a new blank column to store the Size Segment\n",
    "zillow_df['Size Segment'] = pd.NA\n",
    "# Re-order columns so that Size Segment is next to Size Rank\n",
    "columns = zillow_df.columns.tolist()\n",
    "columns.remove('Size Segment')\n",
    "columns.insert(2, 'Size Segment')\n",
    "zillow_df = zillow_df[columns]\n",
    "# Establish Size Segments as bins\n",
    "size_segment_bins = [-1, 0, 100, 300, 500, 1000]\n",
    "size_segment_labels = [\"National Average\", \"Top 100\", \"101 - 300\", \"301 - 500\", \"Bottom 500\"]\n",
    "# Insert segment values into Size Segment column\n",
    "zillow_df['Size Segment'] = pd.cut(zillow_df[\"Size Rank\"], bins=size_segment_bins, labels=size_segment_labels)\n",
    "# Select only the columns with date information and the 'Size Segment' column\n",
    "date_columns = [col for col in zillow_df.columns if isinstance(col, str) and col.startswith('2018') or col.startswith('2019') or col.startswith('2020') or col.startswith('2021') or col.startswith('2022') or col.startswith('2023')]\n",
    "columns_of_interest = ['RegionID', 'Size Rank', 'Size Segment', 'Metro Area', 'State'] + date_columns\n",
    "zillow_df= zillow_df[columns_of_interest]\n",
    "\n",
    "# Create a unique data frame which is named after the metric currently being analyzed:\n",
    "# Set the df name as a string equal to the zillow metric name, with spaces replaced with underscores and in all lowercase\n",
    "zillow_unique_df_name = zillow_metric_name.replace(\" \", \"_\").lower() + \"_df\"\n",
    "globals()[zillow_unique_df_name] = zillow_df.copy()\n",
    "print(f'Created new dataframe: {zillow_unique_df_name}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "id": "ab70fe65-5788-451b-99d6-17c1fc95b46b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created new dataframe: housing_inventory_df_size\n"
     ]
    }
   ],
   "source": [
    "# --- Create a data frame segmented by size rank ---\n",
    "# Group by 'Size Segment' and calculate the mean for each segment\n",
    "zillow_df_mean = zillow_df.groupby('Size Segment', observed = False).mean('Size Segment').drop('RegionID',  axis = 1).drop('Size Rank',  axis = 1)\n",
    "# Reset the index for better display\n",
    "zillow_df_mean.reset_index(inplace=True)\n",
    "zillow_df_mean.rename(columns={'Size Segment': 'Date'}, inplace = True)\n",
    "zillow_df_mean.set_index('Date', inplace=True)\n",
    "zillow_df_mean = zillow_df_mean.T\n",
    "zillow_df_mean.reset_index(inplace=True)\n",
    "zillow_df_mean.rename(columns={'index': 'Date'}, inplace=True)\n",
    "zillow_df_mean['Date'] = pd.to_datetime(zillow_df_mean['Date'])\n",
    "# Create uniquely named data frame\n",
    "size_unique_df_name = zillow_metric_name.replace(\" \", \"_\").lower() + \"_df_size\"\n",
    "globals()[size_unique_df_name] = zillow_df_mean.copy()\n",
    "print(f'Created new dataframe: {size_unique_df_name }')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "id": "855ea5e2-3111-40c5-9e82-599f836ccf28",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Date</th>\n",
       "      <th>Date</th>\n",
       "      <th>National Average</th>\n",
       "      <th>Top 100</th>\n",
       "      <th>101 - 300</th>\n",
       "      <th>301 - 500</th>\n",
       "      <th>Bottom 500</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-03-31</td>\n",
       "      <td>1421529.0</td>\n",
       "      <td>8455.387755</td>\n",
       "      <td>1418.040609</td>\n",
       "      <td>515.189744</td>\n",
       "      <td>217.046569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-04-30</td>\n",
       "      <td>1500193.0</td>\n",
       "      <td>9016.153061</td>\n",
       "      <td>1479.522843</td>\n",
       "      <td>534.179487</td>\n",
       "      <td>225.093137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-05-31</td>\n",
       "      <td>1592414.0</td>\n",
       "      <td>9623.020408</td>\n",
       "      <td>1551.781726</td>\n",
       "      <td>562.492308</td>\n",
       "      <td>237.549020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-06-30</td>\n",
       "      <td>1660614.0</td>\n",
       "      <td>10008.408163</td>\n",
       "      <td>1601.822335</td>\n",
       "      <td>591.025641</td>\n",
       "      <td>250.652812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-07-31</td>\n",
       "      <td>1709143.0</td>\n",
       "      <td>10245.183673</td>\n",
       "      <td>1643.253807</td>\n",
       "      <td>615.153846</td>\n",
       "      <td>261.897311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>2023-08-31</td>\n",
       "      <td>950311.0</td>\n",
       "      <td>5856.585859</td>\n",
       "      <td>914.426396</td>\n",
       "      <td>331.658163</td>\n",
       "      <td>150.887097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>2023-09-30</td>\n",
       "      <td>959735.0</td>\n",
       "      <td>5878.787879</td>\n",
       "      <td>926.913706</td>\n",
       "      <td>333.836735</td>\n",
       "      <td>151.027586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>2023-10-31</td>\n",
       "      <td>977241.0</td>\n",
       "      <td>5984.060606</td>\n",
       "      <td>946.172589</td>\n",
       "      <td>336.137755</td>\n",
       "      <td>150.652874</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>2023-11-30</td>\n",
       "      <td>970238.0</td>\n",
       "      <td>5959.202020</td>\n",
       "      <td>941.406091</td>\n",
       "      <td>328.520408</td>\n",
       "      <td>146.098851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>2023-12-31</td>\n",
       "      <td>932240.0</td>\n",
       "      <td>5718.060606</td>\n",
       "      <td>911.598985</td>\n",
       "      <td>313.188776</td>\n",
       "      <td>138.763218</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>70 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Date       Date  National Average       Top 100    101 - 300   301 - 500  \\\n",
       "0    2018-03-31         1421529.0   8455.387755  1418.040609  515.189744   \n",
       "1    2018-04-30         1500193.0   9016.153061  1479.522843  534.179487   \n",
       "2    2018-05-31         1592414.0   9623.020408  1551.781726  562.492308   \n",
       "3    2018-06-30         1660614.0  10008.408163  1601.822335  591.025641   \n",
       "4    2018-07-31         1709143.0  10245.183673  1643.253807  615.153846   \n",
       "..          ...               ...           ...          ...         ...   \n",
       "65   2023-08-31          950311.0   5856.585859   914.426396  331.658163   \n",
       "66   2023-09-30          959735.0   5878.787879   926.913706  333.836735   \n",
       "67   2023-10-31          977241.0   5984.060606   946.172589  336.137755   \n",
       "68   2023-11-30          970238.0   5959.202020   941.406091  328.520408   \n",
       "69   2023-12-31          932240.0   5718.060606   911.598985  313.188776   \n",
       "\n",
       "Date  Bottom 500  \n",
       "0     217.046569  \n",
       "1     225.093137  \n",
       "2     237.549020  \n",
       "3     250.652812  \n",
       "4     261.897311  \n",
       "..           ...  \n",
       "65    150.887097  \n",
       "66    151.027586  \n",
       "67    150.652874  \n",
       "68    146.098851  \n",
       "69    138.763218  \n",
       "\n",
       "[70 rows x 6 columns]"
      ]
     },
     "execution_count": 287,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "housing_inventory_df_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "id": "dcd437d4-a01f-4088-bd17-a90cd1588012",
   "metadata": {},
   "outputs": [],
   "source": [
    "# --- Set filepath for file to analyze ---\n",
    "# NOTE: Edit this for each new file being run\n",
    "zillow_csv_path = Path('Zillow_Data/Metro_zhvi_uc_sfrcondo_tier_0.0_0.33_sm_sa_month.csv')\n",
    "zillow_metric_name = 'Home Value Index'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "id": "addf618b-ea8b-44a3-b4cd-d3165f574e71",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created new dataframe: home_value_index_df\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# --- Create a data frame containing the data from the CSV ---\n",
    "# Load the CSV\n",
    "zillow_df = pd.read_csv(zillow_csv_path)\n",
    "# Insert 'US' as the state name for the United States region, so it shows up in state summary\n",
    "zillow_df.at[0,\"StateName\"] = 'US'\n",
    "# Rename labels\n",
    "zillow_df.rename(columns={'SizeRank': 'Size Rank', 'RegionName': 'Metro Area', 'StateName': 'State' }, inplace=True)\n",
    "# Remove the RegionType column\n",
    "zillow_df = zillow_df.drop('RegionType', axis = 1)\n",
    "# Insert a new blank column to store the Size Segment\n",
    "zillow_df['Size Segment'] = pd.NA\n",
    "# Re-order columns so that Size Segment is next to Size Rank\n",
    "columns = zillow_df.columns.tolist()\n",
    "columns.remove('Size Segment')\n",
    "columns.insert(2, 'Size Segment')\n",
    "zillow_df = zillow_df[columns]\n",
    "# Establish Size Segments as bins\n",
    "size_segment_bins = [-1, 0, 100, 300, 500, 1000]\n",
    "size_segment_labels = [\"National Average\", \"Top 100\", \"101 - 300\", \"301 - 500\", \"Bottom 500\"]\n",
    "# Insert segment values into Size Segment column\n",
    "zillow_df['Size Segment'] = pd.cut(zillow_df[\"Size Rank\"], bins=size_segment_bins, labels=size_segment_labels)\n",
    "# Select only the columns with date information and the 'Size Segment' column\n",
    "date_columns = [col for col in zillow_df.columns if isinstance(col, str) and col.startswith('2018') or col.startswith('2019') or col.startswith('2020') or col.startswith('2021') or col.startswith('2022') or col.startswith('2023')]\n",
    "columns_of_interest = ['RegionID', 'Size Rank', 'Size Segment', 'Metro Area', 'State'] + date_columns\n",
    "zillow_df= zillow_df[columns_of_interest]\n",
    "\n",
    "# Create a unique data frame which is named after the metric currently being analyzed:\n",
    "# Set the df name as a string equal to the zillow metric name, with spaces replaced with underscores and in all lowercase\n",
    "zillow_unique_df_name = zillow_metric_name.replace(\" \", \"_\").lower() + \"_df\"\n",
    "globals()[zillow_unique_df_name] = zillow_df.copy()\n",
    "print(f'Created new dataframe: {zillow_unique_df_name}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "id": "12ec5cc7-be9e-4a92-b5dc-2d60ba75d49e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created new dataframe: home_value_index_df_size\n"
     ]
    }
   ],
   "source": [
    "# --- Create a data frame segmented by size rank ---\n",
    "# Group by 'Size Segment' and calculate the mean for each segment\n",
    "zillow_df_mean = zillow_df.groupby('Size Segment', observed = False).mean('Size Segment').drop('RegionID',  axis = 1).drop('Size Rank',  axis = 1)\n",
    "# Reset the index for better display\n",
    "zillow_df_mean.reset_index(inplace=True)\n",
    "zillow_df_mean.rename(columns={'Size Segment': 'Date'}, inplace = True)\n",
    "zillow_df_mean.set_index('Date', inplace=True)\n",
    "zillow_df_mean = zillow_df_mean.T\n",
    "zillow_df_mean.reset_index(inplace=True)\n",
    "zillow_df_mean.rename(columns={'index': 'Date'}, inplace=True)\n",
    "zillow_df_mean['Date'] = pd.to_datetime(zillow_df_mean['Date'])\n",
    "# Create uniquely named data frame\n",
    "size_unique_df_name = zillow_metric_name.replace(\" \", \"_\").lower() + \"_df_size\"\n",
    "globals()[size_unique_df_name] = zillow_df_mean.copy()\n",
    "print(f'Created new dataframe: {size_unique_df_name }')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "id": "dd92df4d-c5e6-45b1-9dca-2b7d4366422c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Date</th>\n",
       "      <th>Date</th>\n",
       "      <th>National Average</th>\n",
       "      <th>Top 100</th>\n",
       "      <th>101 - 300</th>\n",
       "      <th>301 - 500</th>\n",
       "      <th>Bottom 500</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-01-31</td>\n",
       "      <td>115599.331195</td>\n",
       "      <td>164902.298786</td>\n",
       "      <td>129159.532060</td>\n",
       "      <td>108076.462572</td>\n",
       "      <td>89803.582376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-02-28</td>\n",
       "      <td>116333.443858</td>\n",
       "      <td>166426.951939</td>\n",
       "      <td>130075.905730</td>\n",
       "      <td>108687.892468</td>\n",
       "      <td>90328.695507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-03-31</td>\n",
       "      <td>117285.851998</td>\n",
       "      <td>168106.509655</td>\n",
       "      <td>131163.298261</td>\n",
       "      <td>109500.683532</td>\n",
       "      <td>91105.619764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-04-30</td>\n",
       "      <td>118158.763289</td>\n",
       "      <td>169631.246847</td>\n",
       "      <td>132165.281767</td>\n",
       "      <td>110283.086575</td>\n",
       "      <td>91880.103782</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-05-31</td>\n",
       "      <td>118948.597884</td>\n",
       "      <td>171035.426735</td>\n",
       "      <td>133104.438783</td>\n",
       "      <td>111018.751390</td>\n",
       "      <td>92581.399034</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>2023-08-31</td>\n",
       "      <td>189079.953674</td>\n",
       "      <td>270712.709269</td>\n",
       "      <td>213226.413014</td>\n",
       "      <td>176615.058253</td>\n",
       "      <td>144822.595449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>2023-09-30</td>\n",
       "      <td>189837.308726</td>\n",
       "      <td>272290.650058</td>\n",
       "      <td>214194.426377</td>\n",
       "      <td>177254.245820</td>\n",
       "      <td>145238.510357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>2023-10-31</td>\n",
       "      <td>190399.519287</td>\n",
       "      <td>273600.386913</td>\n",
       "      <td>214871.033756</td>\n",
       "      <td>177669.366628</td>\n",
       "      <td>145435.421736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>2023-11-30</td>\n",
       "      <td>190828.050161</td>\n",
       "      <td>274557.799893</td>\n",
       "      <td>215357.592922</td>\n",
       "      <td>178089.261906</td>\n",
       "      <td>145650.175601</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>2023-12-31</td>\n",
       "      <td>191097.547754</td>\n",
       "      <td>275266.900180</td>\n",
       "      <td>215696.122169</td>\n",
       "      <td>178254.599794</td>\n",
       "      <td>145666.859545</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>72 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Date       Date  National Average        Top 100      101 - 300  \\\n",
       "0    2018-01-31     115599.331195  164902.298786  129159.532060   \n",
       "1    2018-02-28     116333.443858  166426.951939  130075.905730   \n",
       "2    2018-03-31     117285.851998  168106.509655  131163.298261   \n",
       "3    2018-04-30     118158.763289  169631.246847  132165.281767   \n",
       "4    2018-05-31     118948.597884  171035.426735  133104.438783   \n",
       "..          ...               ...            ...            ...   \n",
       "67   2023-08-31     189079.953674  270712.709269  213226.413014   \n",
       "68   2023-09-30     189837.308726  272290.650058  214194.426377   \n",
       "69   2023-10-31     190399.519287  273600.386913  214871.033756   \n",
       "70   2023-11-30     190828.050161  274557.799893  215357.592922   \n",
       "71   2023-12-31     191097.547754  275266.900180  215696.122169   \n",
       "\n",
       "Date      301 - 500     Bottom 500  \n",
       "0     108076.462572   89803.582376  \n",
       "1     108687.892468   90328.695507  \n",
       "2     109500.683532   91105.619764  \n",
       "3     110283.086575   91880.103782  \n",
       "4     111018.751390   92581.399034  \n",
       "..              ...            ...  \n",
       "67    176615.058253  144822.595449  \n",
       "68    177254.245820  145238.510357  \n",
       "69    177669.366628  145435.421736  \n",
       "70    178089.261906  145650.175601  \n",
       "71    178254.599794  145666.859545  \n",
       "\n",
       "[72 rows x 6 columns]"
      ]
     },
     "execution_count": 291,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "home_value_index_df_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "id": "dffb5258-59ea-4264-9088-9606d14ab795",
   "metadata": {},
   "outputs": [],
   "source": [
    "# --- Set filepath for file to analyze ---\n",
    "# NOTE: Edit this for each new file being run\n",
    "zillow_csv_path = Path('Zillow_Data/Metro_zori_uc_sfrcondomfr_sm_month.csv')\n",
    "zillow_metric_name = 'Rent Index'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "id": "a51170f4-70e3-4bed-bf3d-fd6a6fcfadd3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created new dataframe: rent_index_df\n"
     ]
    }
   ],
   "source": [
    "# --- Create a data frame containing the data from the CSV ---\n",
    "# Load the CSV\n",
    "zillow_df = pd.read_csv(zillow_csv_path)\n",
    "# Insert 'US' as the state name for the United States region, so it shows up in state summary\n",
    "zillow_df.at[0,\"StateName\"] = 'US'\n",
    "# Rename labels\n",
    "zillow_df.rename(columns={'SizeRank': 'Size Rank', 'RegionName': 'Metro Area', 'StateName': 'State' }, inplace=True)\n",
    "# Remove the RegionType column\n",
    "zillow_df = zillow_df.drop('RegionType', axis = 1)\n",
    "# Insert a new blank column to store the Size Segment\n",
    "zillow_df['Size Segment'] = pd.NA\n",
    "# Re-order columns so that Size Segment is next to Size Rank\n",
    "columns = zillow_df.columns.tolist()\n",
    "columns.remove('Size Segment')\n",
    "columns.insert(2, 'Size Segment')\n",
    "zillow_df = zillow_df[columns]\n",
    "# Establish Size Segments as bins\n",
    "size_segment_bins = [-1, 0, 100, 300, 500, 1000]\n",
    "size_segment_labels = [\"National Average\", \"Top 100\", \"101 - 300\", \"301 - 500\", \"Bottom 500\"]\n",
    "# Insert segment values into Size Segment column\n",
    "zillow_df['Size Segment'] = pd.cut(zillow_df[\"Size Rank\"], bins=size_segment_bins, labels=size_segment_labels)\n",
    "# Select only the columns with date information and the 'Size Segment' column\n",
    "date_columns = [col for col in zillow_df.columns if isinstance(col, str) and col.startswith('2018') or col.startswith('2019') or col.startswith('2020') or col.startswith('2021') or col.startswith('2022') or col.startswith('2023')]\n",
    "columns_of_interest = ['RegionID', 'Size Rank', 'Size Segment', 'Metro Area', 'State'] + date_columns\n",
    "zillow_df= zillow_df[columns_of_interest]\n",
    "\n",
    "# Create a unique data frame which is named after the metric currently being analyzed:\n",
    "# Set the df name as a string equal to the zillow metric name, with spaces replaced with underscores and in all lowercase\n",
    "zillow_unique_df_name = zillow_metric_name.replace(\" \", \"_\").lower() + \"_df\"\n",
    "globals()[zillow_unique_df_name] = zillow_df.copy()\n",
    "print(f'Created new dataframe: {zillow_unique_df_name}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "id": "f436e1f0-bf59-422f-bcd5-7df0e3f278b6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created new dataframe: rent_index_df_size\n"
     ]
    }
   ],
   "source": [
    "# --- Create a data frame segmented by size rank ---\n",
    "# Group by 'Size Segment' and calculate the mean for each segment\n",
    "zillow_df_mean = zillow_df.groupby('Size Segment', observed = False).mean('Size Segment').drop('RegionID',  axis = 1).drop('Size Rank',  axis = 1)\n",
    "# Reset the index for better display\n",
    "zillow_df_mean.reset_index(inplace=True)\n",
    "zillow_df_mean.rename(columns={'Size Segment': 'Date'}, inplace = True)\n",
    "zillow_df_mean.set_index('Date', inplace=True)\n",
    "zillow_df_mean = zillow_df_mean.T\n",
    "zillow_df_mean.reset_index(inplace=True)\n",
    "zillow_df_mean.rename(columns={'index': 'Date'}, inplace=True)\n",
    "zillow_df_mean['Date'] = pd.to_datetime(zillow_df_mean['Date'])\n",
    "# Create uniquely named data frame\n",
    "size_unique_df_name = zillow_metric_name.replace(\" \", \"_\").lower() + \"_df_size\"\n",
    "globals()[size_unique_df_name] = zillow_df_mean.copy()\n",
    "print(f'Created new dataframe: {size_unique_df_name }')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "id": "1f23c1fe-deee-4421-8ab0-d0ae09dd6ee1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Date</th>\n",
       "      <th>Date</th>\n",
       "      <th>National Average</th>\n",
       "      <th>Top 100</th>\n",
       "      <th>101 - 300</th>\n",
       "      <th>301 - 500</th>\n",
       "      <th>Bottom 500</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-01-31</td>\n",
       "      <td>1418.047212</td>\n",
       "      <td>1275.944314</td>\n",
       "      <td>1063.721845</td>\n",
       "      <td>1059.213724</td>\n",
       "      <td>808.198016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-02-28</td>\n",
       "      <td>1425.777880</td>\n",
       "      <td>1283.686996</td>\n",
       "      <td>1066.329974</td>\n",
       "      <td>1072.605294</td>\n",
       "      <td>815.147310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-03-31</td>\n",
       "      <td>1435.772212</td>\n",
       "      <td>1292.168972</td>\n",
       "      <td>1074.382507</td>\n",
       "      <td>1071.550974</td>\n",
       "      <td>816.026444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-04-30</td>\n",
       "      <td>1445.782747</td>\n",
       "      <td>1300.889258</td>\n",
       "      <td>1082.176821</td>\n",
       "      <td>1066.736175</td>\n",
       "      <td>822.025118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-05-31</td>\n",
       "      <td>1454.417816</td>\n",
       "      <td>1307.751871</td>\n",
       "      <td>1088.626370</td>\n",
       "      <td>1071.425079</td>\n",
       "      <td>823.404278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>2023-08-31</td>\n",
       "      <td>2001.769101</td>\n",
       "      <td>1815.809664</td>\n",
       "      <td>1517.270656</td>\n",
       "      <td>1329.693289</td>\n",
       "      <td>1261.688190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>2023-09-30</td>\n",
       "      <td>2005.728434</td>\n",
       "      <td>1817.972593</td>\n",
       "      <td>1524.498575</td>\n",
       "      <td>1334.360930</td>\n",
       "      <td>1273.736334</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>2023-10-31</td>\n",
       "      <td>2004.533106</td>\n",
       "      <td>1817.826625</td>\n",
       "      <td>1529.636295</td>\n",
       "      <td>1342.833917</td>\n",
       "      <td>1280.177676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>2023-11-30</td>\n",
       "      <td>2000.353386</td>\n",
       "      <td>1815.606304</td>\n",
       "      <td>1529.714550</td>\n",
       "      <td>1339.384352</td>\n",
       "      <td>1283.428300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>2023-12-31</td>\n",
       "      <td>1997.393964</td>\n",
       "      <td>1815.392455</td>\n",
       "      <td>1528.333331</td>\n",
       "      <td>1344.307045</td>\n",
       "      <td>1271.887538</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>72 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Date       Date  National Average      Top 100    101 - 300    301 - 500  \\\n",
       "0    2018-01-31       1418.047212  1275.944314  1063.721845  1059.213724   \n",
       "1    2018-02-28       1425.777880  1283.686996  1066.329974  1072.605294   \n",
       "2    2018-03-31       1435.772212  1292.168972  1074.382507  1071.550974   \n",
       "3    2018-04-30       1445.782747  1300.889258  1082.176821  1066.736175   \n",
       "4    2018-05-31       1454.417816  1307.751871  1088.626370  1071.425079   \n",
       "..          ...               ...          ...          ...          ...   \n",
       "67   2023-08-31       2001.769101  1815.809664  1517.270656  1329.693289   \n",
       "68   2023-09-30       2005.728434  1817.972593  1524.498575  1334.360930   \n",
       "69   2023-10-31       2004.533106  1817.826625  1529.636295  1342.833917   \n",
       "70   2023-11-30       2000.353386  1815.606304  1529.714550  1339.384352   \n",
       "71   2023-12-31       1997.393964  1815.392455  1528.333331  1344.307045   \n",
       "\n",
       "Date   Bottom 500  \n",
       "0      808.198016  \n",
       "1      815.147310  \n",
       "2      816.026444  \n",
       "3      822.025118  \n",
       "4      823.404278  \n",
       "..            ...  \n",
       "67    1261.688190  \n",
       "68    1273.736334  \n",
       "69    1280.177676  \n",
       "70    1283.428300  \n",
       "71    1271.887538  \n",
       "\n",
       "[72 rows x 6 columns]"
      ]
     },
     "execution_count": 295,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rent_index_df_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "id": "a25c8713-199f-43cb-ad76-588a2c056ba6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Market Heat Index</th>\n",
       "      <th>Home Value Index</th>\n",
       "      <th>Rent Index</th>\n",
       "      <th>Housing Inventory</th>\n",
       "      <th>Federal Funds Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-01-31</td>\n",
       "      <td>49.0</td>\n",
       "      <td>115599.331195</td>\n",
       "      <td>1418.047212</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-02-28</td>\n",
       "      <td>50.0</td>\n",
       "      <td>116333.443858</td>\n",
       "      <td>1425.777880</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-03-31</td>\n",
       "      <td>52.0</td>\n",
       "      <td>117285.851998</td>\n",
       "      <td>1435.772212</td>\n",
       "      <td>1421529.0</td>\n",
       "      <td>1.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-04-30</td>\n",
       "      <td>54.0</td>\n",
       "      <td>118158.763289</td>\n",
       "      <td>1445.782747</td>\n",
       "      <td>1500193.0</td>\n",
       "      <td>1.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-05-31</td>\n",
       "      <td>54.0</td>\n",
       "      <td>118948.597884</td>\n",
       "      <td>1454.417816</td>\n",
       "      <td>1592414.0</td>\n",
       "      <td>1.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>2023-08-31</td>\n",
       "      <td>62.0</td>\n",
       "      <td>189079.953674</td>\n",
       "      <td>2001.769101</td>\n",
       "      <td>950311.0</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>2023-09-30</td>\n",
       "      <td>58.0</td>\n",
       "      <td>189837.308726</td>\n",
       "      <td>2005.728434</td>\n",
       "      <td>959735.0</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>2023-10-31</td>\n",
       "      <td>55.0</td>\n",
       "      <td>190399.519287</td>\n",
       "      <td>2004.533106</td>\n",
       "      <td>977241.0</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>2023-11-30</td>\n",
       "      <td>53.0</td>\n",
       "      <td>190828.050161</td>\n",
       "      <td>2000.353386</td>\n",
       "      <td>970238.0</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>2023-12-31</td>\n",
       "      <td>55.0</td>\n",
       "      <td>191097.547754</td>\n",
       "      <td>1997.393964</td>\n",
       "      <td>932240.0</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>72 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date  Market Heat Index  Home Value Index   Rent Index  \\\n",
       "0  2018-01-31               49.0     115599.331195  1418.047212   \n",
       "1  2018-02-28               50.0     116333.443858  1425.777880   \n",
       "2  2018-03-31               52.0     117285.851998  1435.772212   \n",
       "3  2018-04-30               54.0     118158.763289  1445.782747   \n",
       "4  2018-05-31               54.0     118948.597884  1454.417816   \n",
       "..        ...                ...               ...          ...   \n",
       "67 2023-08-31               62.0     189079.953674  2001.769101   \n",
       "68 2023-09-30               58.0     189837.308726  2005.728434   \n",
       "69 2023-10-31               55.0     190399.519287  2004.533106   \n",
       "70 2023-11-30               53.0     190828.050161  2000.353386   \n",
       "71 2023-12-31               55.0     191097.547754  1997.393964   \n",
       "\n",
       "    Housing Inventory  Federal Funds Rate  \n",
       "0                 NaN                1.42  \n",
       "1                 NaN                1.42  \n",
       "2           1421529.0                1.51  \n",
       "3           1500193.0                1.69  \n",
       "4           1592414.0                1.70  \n",
       "..                ...                 ...  \n",
       "67           950311.0                5.33  \n",
       "68           959735.0                5.33  \n",
       "69           977241.0                5.33  \n",
       "70           970238.0                5.33  \n",
       "71           932240.0                5.33  \n",
       "\n",
       "[72 rows x 6 columns]"
      ]
     },
     "execution_count": 296,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Copy one of the size segment data frames into a new data frame while dropping all size segment columns except \n",
    "national_avg_allmetrics_df = market_heat_index_df_size.copy().drop('Top 100', axis = 1,).drop('101 - 300', axis = 1,).drop('301 - 500', axis = 1,).drop('Bottom 500', axis = 1,).rename(columns={'National Average': 'Market Heat Index'})\n",
    "# Add in National Values from thier respective data frames\n",
    "national_avg_allmetrics_df = pd.merge(national_avg_allmetrics_df, home_value_index_df_size, on=\"Date\", how='outer').drop('Top 100', axis = 1,).drop('101 - 300', axis = 1,).drop('301 - 500', axis = 1,).drop('Bottom 500', axis = 1,).rename(columns={'National Average': 'Home Value Index'})\n",
    "national_avg_allmetrics_df = pd.merge(national_avg_allmetrics_df, rent_index_df_size, on=\"Date\", how='outer').drop('Top 100', axis = 1,).drop('101 - 300', axis = 1,).drop('301 - 500', axis = 1,).drop('Bottom 500', axis = 1,).rename(columns={'National Average': 'Rent Index'})\n",
    "national_avg_allmetrics_df = pd.merge(national_avg_allmetrics_df, housing_inventory_df_size, on=\"Date\", how='outer').drop('Top 100', axis = 1,).drop('101 - 300', axis = 1,).drop('301 - 500', axis = 1,).drop('Bottom 500', axis = 1,).rename(columns={'National Average': 'Housing Inventory'})\n",
    "national_avg_allmetrics_df = pd.merge(national_avg_allmetrics_df, interest_rates_df['Federal Funds Rate'], on=\"Date\", how='inner')\n",
    "national_avg_allmetrics_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "id": "40bab59c-fa8b-4f15-b289-c017431e0656",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Market Heat Index</th>\n",
       "      <th>Home Value Index</th>\n",
       "      <th>Rent Index</th>\n",
       "      <th>Housing Inventory</th>\n",
       "      <th>Federal Funds Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Market Heat Index</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.383789</td>\n",
       "      <td>0.259155</td>\n",
       "      <td>-0.716076</td>\n",
       "      <td>-0.511744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Home Value Index</th>\n",
       "      <td>0.383789</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.985023</td>\n",
       "      <td>-0.860478</td>\n",
       "      <td>0.429430</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rent Index</th>\n",
       "      <td>0.259155</td>\n",
       "      <td>0.985023</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.781561</td>\n",
       "      <td>0.535035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Housing Inventory</th>\n",
       "      <td>-0.716076</td>\n",
       "      <td>-0.860478</td>\n",
       "      <td>-0.781561</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.076233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Federal Funds Rate</th>\n",
       "      <td>-0.511744</td>\n",
       "      <td>0.429430</td>\n",
       "      <td>0.535035</td>\n",
       "      <td>-0.076233</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Market Heat Index  Home Value Index  Rent Index  \\\n",
       "Market Heat Index            1.000000          0.383789    0.259155   \n",
       "Home Value Index             0.383789          1.000000    0.985023   \n",
       "Rent Index                   0.259155          0.985023    1.000000   \n",
       "Housing Inventory           -0.716076         -0.860478   -0.781561   \n",
       "Federal Funds Rate          -0.511744          0.429430    0.535035   \n",
       "\n",
       "                    Housing Inventory  Federal Funds Rate  \n",
       "Market Heat Index           -0.716076           -0.511744  \n",
       "Home Value Index            -0.860478            0.429430  \n",
       "Rent Index                  -0.781561            0.535035  \n",
       "Housing Inventory            1.000000           -0.076233  \n",
       "Federal Funds Rate          -0.076233            1.000000  "
      ]
     },
     "execution_count": 297,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "national_avg_correlation_matrix_df = national_avg_allmetrics_df.drop('Date', axis = 1).corr()\n",
    "national_avg_correlation_matrix_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "id": "b138f418-da16-4449-ac05-c512a9d06600",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Market Heat Index</th>\n",
       "      <th>Home Value Index</th>\n",
       "      <th>Rent Index</th>\n",
       "      <th>Housing Inventory</th>\n",
       "      <th>Federal Funds Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Market Heat Index</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.327521</td>\n",
       "      <td>0.353637</td>\n",
       "      <td>-0.446917</td>\n",
       "      <td>0.279033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Home Value Index</th>\n",
       "      <td>0.327521</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.981486</td>\n",
       "      <td>-0.022967</td>\n",
       "      <td>0.433277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rent Index</th>\n",
       "      <td>0.353637</td>\n",
       "      <td>0.981486</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.145498</td>\n",
       "      <td>0.436093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Housing Inventory</th>\n",
       "      <td>-0.446917</td>\n",
       "      <td>-0.022967</td>\n",
       "      <td>0.145498</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.041837</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Federal Funds Rate</th>\n",
       "      <td>0.279033</td>\n",
       "      <td>0.433277</td>\n",
       "      <td>0.436093</td>\n",
       "      <td>0.041837</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Market Heat Index  Home Value Index  Rent Index  \\\n",
       "Market Heat Index            1.000000          0.327521    0.353637   \n",
       "Home Value Index             0.327521          1.000000    0.981486   \n",
       "Rent Index                   0.353637          0.981486    1.000000   \n",
       "Housing Inventory           -0.446917         -0.022967    0.145498   \n",
       "Federal Funds Rate           0.279033          0.433277    0.436093   \n",
       "\n",
       "                    Housing Inventory  Federal Funds Rate  \n",
       "Market Heat Index           -0.446917            0.279033  \n",
       "Home Value Index            -0.022967            0.433277  \n",
       "Rent Index                   0.145498            0.436093  \n",
       "Housing Inventory            1.000000            0.041837  \n",
       "Federal Funds Rate           0.041837            1.000000  "
      ]
     },
     "execution_count": 298,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "national_avg_allmetrics_df_prepandemic = national_avg_allmetrics_df[(national_avg_allmetrics_df['Date'] >= prepandemic_start) & (national_avg_allmetrics_df['Date'] <= prepandemic_end)]\n",
    "national_avg_correlation_matrix_df_prepandemic = national_avg_allmetrics_df_prepandemic.drop('Date', axis = 1).corr()\n",
    "national_avg_correlation_matrix_df_prepandemic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "id": "4da4dcdf-d387-4b59-b242-6ecf59cf6a31",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Market Heat Index</th>\n",
       "      <th>Home Value Index</th>\n",
       "      <th>Rent Index</th>\n",
       "      <th>Housing Inventory</th>\n",
       "      <th>Federal Funds Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Market Heat Index</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.506363</td>\n",
       "      <td>0.181739</td>\n",
       "      <td>-0.769333</td>\n",
       "      <td>-0.629758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Home Value Index</th>\n",
       "      <td>0.506363</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.904830</td>\n",
       "      <td>-0.801339</td>\n",
       "      <td>-0.457622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rent Index</th>\n",
       "      <td>0.181739</td>\n",
       "      <td>0.904830</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.520782</td>\n",
       "      <td>-0.292791</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Housing Inventory</th>\n",
       "      <td>-0.769333</td>\n",
       "      <td>-0.801339</td>\n",
       "      <td>-0.520782</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.392095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Federal Funds Rate</th>\n",
       "      <td>-0.629758</td>\n",
       "      <td>-0.457622</td>\n",
       "      <td>-0.292791</td>\n",
       "      <td>0.392095</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Market Heat Index  Home Value Index  Rent Index  \\\n",
       "Market Heat Index            1.000000          0.506363    0.181739   \n",
       "Home Value Index             0.506363          1.000000    0.904830   \n",
       "Rent Index                   0.181739          0.904830    1.000000   \n",
       "Housing Inventory           -0.769333         -0.801339   -0.520782   \n",
       "Federal Funds Rate          -0.629758         -0.457622   -0.292791   \n",
       "\n",
       "                    Housing Inventory  Federal Funds Rate  \n",
       "Market Heat Index           -0.769333           -0.629758  \n",
       "Home Value Index            -0.801339           -0.457622  \n",
       "Rent Index                  -0.520782           -0.292791  \n",
       "Housing Inventory            1.000000            0.392095  \n",
       "Federal Funds Rate           0.392095            1.000000  "
      ]
     },
     "execution_count": 299,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "national_avg_allmetrics_df_pandemic = national_avg_allmetrics_df[(national_avg_allmetrics_df['Date'] >= pandemic_start) & (national_avg_allmetrics_df['Date'] <= pandemic_end)]\n",
    "national_avg_correlation_matrix_df_pandemic = national_avg_allmetrics_df_pandemic.drop('Date', axis = 1).corr()\n",
    "national_avg_correlation_matrix_df_pandemic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "id": "051a408d-a5cc-4f03-9d4c-fa16779d8772",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Market Heat Index</th>\n",
       "      <th>Home Value Index</th>\n",
       "      <th>Rent Index</th>\n",
       "      <th>Housing Inventory</th>\n",
       "      <th>Federal Funds Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Market Heat Index</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.841359</td>\n",
       "      <td>-0.800407</td>\n",
       "      <td>-0.852056</td>\n",
       "      <td>-0.715264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Home Value Index</th>\n",
       "      <td>-0.841359</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.976143</td>\n",
       "      <td>0.627163</td>\n",
       "      <td>0.855458</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rent Index</th>\n",
       "      <td>-0.800407</td>\n",
       "      <td>0.976143</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.564988</td>\n",
       "      <td>0.927841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Housing Inventory</th>\n",
       "      <td>-0.852056</td>\n",
       "      <td>0.627163</td>\n",
       "      <td>0.564988</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.350665</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Federal Funds Rate</th>\n",
       "      <td>-0.715264</td>\n",
       "      <td>0.855458</td>\n",
       "      <td>0.927841</td>\n",
       "      <td>0.350665</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Market Heat Index  Home Value Index  Rent Index  \\\n",
       "Market Heat Index            1.000000         -0.841359   -0.800407   \n",
       "Home Value Index            -0.841359          1.000000    0.976143   \n",
       "Rent Index                  -0.800407          0.976143    1.000000   \n",
       "Housing Inventory           -0.852056          0.627163    0.564988   \n",
       "Federal Funds Rate          -0.715264          0.855458    0.927841   \n",
       "\n",
       "                    Housing Inventory  Federal Funds Rate  \n",
       "Market Heat Index           -0.852056           -0.715264  \n",
       "Home Value Index             0.627163            0.855458  \n",
       "Rent Index                   0.564988            0.927841  \n",
       "Housing Inventory            1.000000            0.350665  \n",
       "Federal Funds Rate           0.350665            1.000000  "
      ]
     },
     "execution_count": 300,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "national_avg_allmetrics_df_postpandemic = national_avg_allmetrics_df[(national_avg_allmetrics_df['Date'] >= postpandemic_start) & (national_avg_allmetrics_df['Date'] <= postpandemic_end)]\n",
    "national_avg_correlation_matrix_df_postpandemic = national_avg_allmetrics_df_postpandemic.drop('Date', axis = 1).corr()\n",
    "national_avg_correlation_matrix_df_postpandemic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "50c5453f-be4c-410b-b4c2-f9a1f566988e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
